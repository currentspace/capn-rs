{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Cap'n Web TypeScript Interoperability Test Suite\n *\n * Main entry point for running comprehensive interoperability tests\n * between TypeScript and Rust Cap'n Web implementations.\n */\n\nimport { runClientTests } from './tests/client-tests.js'\nimport { runServerTests } from './tests/server-tests.js'\nimport { wait } from './tests/test-framework.js'\n\ninterface TestConfiguration {\n  runClientTests: boolean\n  runServerTests: boolean\n  waitForRustServer: number\n  verbose: boolean\n}\n\nasync function parseArgs(): Promise<TestConfiguration> {\n  const args = process.argv.slice(2)\n\n  const config: TestConfiguration = {\n    runClientTests: true,\n    runServerTests: true,\n    waitForRustServer: 3000,\n    verbose: false\n  }\n\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i]\n\n    switch (arg) {\n      case '--client-only':\n        config.runClientTests = true\n        config.runServerTests = false\n        break\n      case '--server-only':\n        config.runClientTests = false\n        config.runServerTests = true\n        break\n      case '--wait':\n        config.waitForRustServer = parseInt(args[++i] || '3000', 10)\n        break\n      case '--verbose':\n        config.verbose = true\n        break\n      case '--help':\n        console.log(`\nCap'n Web TypeScript Interoperability Test Suite\n\nUsage: node dist/index.js [options]\n\nOptions:\n  --client-only     Run only TypeScript client ‚Üí Rust server tests\n  --server-only     Run only TypeScript server ‚Üê Rust client tests\n  --wait <ms>       Wait time for Rust server startup (default: 3000ms)\n  --verbose         Enable verbose logging\n  --help           Show this help message\n\nExamples:\n  node dist/index.js                    # Run all tests\n  node dist/index.js --client-only      # Test TS client ‚Üí Rust server\n  node dist/index.js --server-only      # Test TS server ‚Üê Rust client\n  node dist/index.js --wait 5000        # Wait 5 seconds for Rust server\n`)\n        process.exit(0)\n        break\n      default:\n        console.warn(`Unknown argument: ${arg}`)\n        break\n    }\n  }\n\n  return config\n}\n\nasync function checkRustServerAvailability(): Promise<boolean> {\n  try {\n    const response = await fetch('http://localhost:8080/health')\n    return response.ok\n  } catch {\n    // Try WebSocket connection\n    try {\n      const ws = new (await import('ws')).default('ws://localhost:8080/ws')\n      return new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          ws.close()\n          resolve(false)\n        }, 2000)\n\n        ws.on('open', () => {\n          clearTimeout(timeout)\n          ws.close()\n          resolve(true)\n        })\n\n        ws.on('error', () => {\n          clearTimeout(timeout)\n          resolve(false)\n        })\n      })\n    } catch {\n      return false\n    }\n  }\n}\n\nasync function main(): Promise<void> {\n  console.log('üåü Cap\\'n Web TypeScript ‚Üî Rust Interoperability Test Suite')\n  console.log('=' .repeat(70))\n  console.log()\n\n  const config = await parseArgs()\n\n  if (config.verbose) {\n    console.log('üìã Test Configuration:')\n    console.log(`   Client Tests: ${config.runClientTests ? '‚úÖ' : '‚ùå'}`)\n    console.log(`   Server Tests: ${config.runServerTests ? '‚úÖ' : '‚ùå'}`)\n    console.log(`   Rust Server Wait: ${config.waitForRustServer}ms`)\n    console.log()\n  }\n\n  let totalTests = 0\n  let totalPassed = 0\n  let totalFailed = 0\n  let totalDuration = 0\n\n  const overallStart = Date.now()\n\n  try {\n    // Run TypeScript Client ‚Üí Rust Server tests\n    if (config.runClientTests) {\n      console.log('üöÄ PHASE 1: TypeScript Client ‚Üí Rust Server Tests')\n      console.log('-'.repeat(50))\n\n      // Check if Rust server is running\n      console.log('üîç Checking for Rust server availability...')\n      let serverAvailable = await checkRustServerAvailability()\n\n      if (!serverAvailable) {\n        console.log(`‚è≥ Rust server not ready, waiting ${config.waitForRustServer}ms...`)\n        console.log('üí° Make sure to start the Rust server first:')\n        console.log('   cd .. && cargo run --example calculator_server')\n        console.log()\n\n        await wait(config.waitForRustServer)\n        serverAvailable = await checkRustServerAvailability()\n      }\n\n      if (serverAvailable) {\n        console.log('‚úÖ Rust server is available, proceeding with client tests...')\n        const clientStart = Date.now()\n        await runClientTests()\n        const clientDuration = Date.now() - clientStart\n\n        console.log(`‚è±Ô∏è  Client tests completed in ${clientDuration}ms`)\n        totalDuration += clientDuration\n      } else {\n        console.error('‚ùå Rust server is not available. Skipping client tests.')\n        console.error('   Start the Rust server with: cargo run --example calculator_server')\n      }\n\n      console.log()\n    }\n\n    // Run TypeScript Server ‚Üê Rust Client tests\n    if (config.runServerTests) {\n      console.log('üéØ PHASE 2: TypeScript Server ‚Üê Rust Client Tests')\n      console.log('-'.repeat(50))\n\n      const serverStart = Date.now()\n      await runServerTests()\n      const serverDuration = Date.now() - serverStart\n\n      console.log(`‚è±Ô∏è  Server tests completed in ${serverDuration}ms`)\n      totalDuration += serverDuration\n      console.log()\n    }\n\n  } catch (error) {\n    console.error('üí• Fatal error during test execution:')\n    console.error(error)\n    process.exit(1)\n  }\n\n  const overallDuration = Date.now() - overallStart\n\n  // Final summary\n  console.log('üèÅ FINAL INTEROPERABILITY REPORT')\n  console.log('='.repeat(70))\n  console.log(`‚è±Ô∏è  Total Test Duration: ${overallDuration}ms`)\n\n  if (totalTests > 0) {\n    const successRate = (totalPassed / totalTests) * 100\n    console.log(`üìä Overall Success Rate: ${successRate.toFixed(1)}%`)\n\n    if (totalFailed === 0) {\n      console.log()\n      console.log('üéâ INTEROPERABILITY VERIFIED!')\n      console.log('‚úÖ TypeScript and Rust Cap\\'n Web implementations are fully compatible!')\n      console.log()\n      console.log('üåü Key achievements:')\n      console.log('   ‚Ä¢ Protocol message format compatibility')\n      console.log('   ‚Ä¢ Bidirectional communication verified')\n      console.log('   ‚Ä¢ Error handling interoperability')\n      console.log('   ‚Ä¢ Performance characteristics validated')\n      console.log('   ‚Ä¢ Edge cases and robustness confirmed')\n    } else {\n      console.log()\n      console.error('üí• INTEROPERABILITY ISSUES DETECTED!')\n      console.error(`‚ùå ${totalFailed} tests failed`)\n      console.error('üîß Review the test results above for details on incompatibilities')\n      process.exit(1)\n    }\n  } else {\n    console.log('‚ö†Ô∏è  No tests were executed')\n    console.log('   Check server availability and configuration')\n  }\n\n  console.log()\n  console.log('üìö For more information:')\n  console.log('   ‚Ä¢ Cap\\'n Web Specification: https://capnproto.org/capnweb')\n  console.log('   ‚Ä¢ Rust Implementation: ../README.md')\n  console.log('   ‚Ä¢ TypeScript Implementation: ./README.md')\n  console.log()\n}\n\n// Handle graceful shutdown\nprocess.on('SIGINT', () => {\n  console.log('\\nüõë Test suite interrupted by user')\n  process.exit(130)\n})\n\nprocess.on('SIGTERM', () => {\n  console.log('\\nüõë Test suite terminated')\n  process.exit(143)\n})\n\n// Run the main function\nmain().catch((error) => {\n  console.error('üí• Unhandled error in main:', error)\n  process.exit(1)\n})"]}
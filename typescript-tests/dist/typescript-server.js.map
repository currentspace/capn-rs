{"version":3,"sources":["../src/typescript-server.ts"],"names":[],"mappings":"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","file":"typescript-server.js","sourcesContent":["/**\n * Standalone TypeScript Server for Rust Client Testing\n *\n * A standalone server that can be run to test Rust client interoperability.\n */\n\nimport { CapnWebServer, MockCalculator, MockUserManager } from './capnweb/server.js'\n\nasync function main(): Promise<void> {\n  console.log('🔥 Starting TypeScript Cap\\'n Web Server for Interop Testing')\n  console.log('=' .repeat(60))\n\n  const server = new CapnWebServer({\n    port: 8081,\n    host: 'localhost',\n    path: '/ws'\n  })\n\n  // Register test capabilities that match the Rust server\n  server.registerCapability(1, new MockCalculator())\n  server.registerCapability(2, new MockCalculator()) // Scientific calculator\n  server.registerCapability(100, new MockUserManager())\n\n  console.log('📋 Registered capabilities:')\n  console.log('   • Calculator (ID: 1) - Basic arithmetic operations')\n  console.log('   • Scientific Calculator (ID: 2) - Advanced math functions')\n  console.log('   • User Manager (ID: 100) - User management operations')\n  console.log()\n\n  try {\n    await server.start()\n    console.log('✅ TypeScript server started successfully!')\n    console.log('🌐 Server Details:')\n    console.log('   • Host: localhost')\n    console.log('   • Port: 8081')\n    console.log('   • WebSocket Path: /ws')\n    console.log('   • Full URL: ws://localhost:8081/ws')\n    console.log()\n\n    console.log('🧪 Available Test Capabilities:')\n    console.log()\n    console.log('Calculator (ID: 1, 2):')\n    console.log('   • add(a, b) → a + b')\n    console.log('   • subtract(a, b) → a - b')\n    console.log('   • multiply(a, b) → a * b')\n    console.log('   • divide(a, b) → a / b (throws on division by zero)')\n    console.log('   • power(base, exp) → base^exp')\n    console.log('   • sqrt(n) → √n (throws on negative numbers)')\n    console.log('   • factorial(n) → n! (throws on negative, max 20)')\n    console.log()\n    console.log('User Manager (ID: 100):')\n    console.log('   • getUser(id) → User object')\n    console.log('   • createUser(userData) → Created user object')\n    console.log()\n\n    console.log('🔌 Ready for Rust client connections!')\n    console.log('💡 Test with Rust client:')\n    console.log('   cd .. && cargo run --example calculator_client --features typescript-server')\n    console.log()\n    console.log('Press Ctrl+C to stop the server...')\n\n    // Keep the server running\n    await new Promise((resolve) => {\n      process.on('SIGINT', () => {\n        console.log('\\n🛑 Received SIGINT, shutting down server...')\n        resolve(undefined)\n      })\n\n      process.on('SIGTERM', () => {\n        console.log('\\n🛑 Received SIGTERM, shutting down server...')\n        resolve(undefined)\n      })\n    })\n\n  } catch (error) {\n    console.error('💥 Failed to start server:', error)\n    process.exit(1)\n  } finally {\n    console.log('🔄 Stopping TypeScript server...')\n    await server.stop()\n    console.log('✅ Server stopped successfully')\n    process.exit(0)\n  }\n}\n\nmain().catch((error) => {\n  console.error('💥 Unhandled error:', error)\n  process.exit(1)\n})"]}
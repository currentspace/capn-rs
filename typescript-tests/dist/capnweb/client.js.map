{"version":3,"sources":["../../src/capnweb/client.ts"],"names":[],"mappings":"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","file":"client.js","sourcesContent":["/**\n * Cap'n Web TypeScript Client\n *\n * A complete TypeScript implementation of the Cap'n Web client\n * for interoperability testing with the Rust server.\n */\n\nimport type {\n  Transport,\n  Message,\n  CallMessage,\n  ResultMessage,\n  Plan,\n  Source,\n  CapId,\n  CallId,\n  ClientConfig,\n  Logger,\n  JsonValue\n} from './types.js'\n\ninterface PendingCall {\n  resolve: (value: unknown) => void\n  reject: (error: Error) => void\n  timeout?: NodeJS.Timeout\n}\n\nexport class CapnWebClient {\n  private transport: Transport\n  private config: ClientConfig\n  private logger: Logger\n  private nextCallId = 1\n  private pendingCalls = new Map<CallId, PendingCall>()\n  private isListening = false\n\n  constructor(transport: Transport, config: ClientConfig = {}, logger?: Logger) {\n    this.transport = transport\n    this.config = {\n      timeout: 30000,\n      maxRetries: 3,\n      retryDelay: 1000,\n      ...config\n    }\n    this.logger = logger || console\n  }\n\n  async connect(): Promise<void> {\n    // Start listening for responses if not already listening\n    if (!this.isListening) {\n      this.startListening()\n    }\n  }\n\n  private startListening(): void {\n    this.isListening = true\n    this.listenForResponses()\n  }\n\n  private async listenForResponses(): Promise<void> {\n    try {\n      while (this.isListening) {\n        const message = await this.transport.receive()\n        if (!message) {\n          await new Promise(resolve => setTimeout(resolve, 100))\n          continue\n        }\n\n        await this.handleMessage(message)\n      }\n    } catch (error) {\n      this.logger.error('Error listening for responses:', error)\n      // Retry listening after a delay\n      if (this.isListening) {\n        setTimeout(() => this.listenForResponses(), 1000)\n      }\n    }\n  }\n\n  private async handleMessage(message: Message): Promise<void> {\n    if ('result' in message) {\n      await this.handleResult(message as ResultMessage)\n    } else {\n      this.logger.warn('Received unexpected message type:', message)\n    }\n  }\n\n  private async handleResult(message: ResultMessage): Promise<void> {\n    const { id } = message.result\n    const pendingCall = this.pendingCalls.get(id)\n\n    if (!pendingCall) {\n      this.logger.warn(`Received result for unknown call ID: ${id}`)\n      return\n    }\n\n    this.pendingCalls.delete(id)\n\n    if (pendingCall.timeout) {\n      clearTimeout(pendingCall.timeout)\n    }\n\n    if (message.result.success) {\n      pendingCall.resolve(message.result.success.value)\n    } else if (message.result.error) {\n      const error = new Error(message.result.error.error.message)\n      ;(error as any).code = message.result.error.error.code\n      ;(error as any).data = message.result.error.error.data\n      pendingCall.reject(error)\n    } else {\n      pendingCall.reject(new Error('Invalid result message format'))\n    }\n  }\n\n  async call(capId: CapId, member: string, args: unknown[]): Promise<unknown> {\n    const callId = this.nextCallId++\n\n    const message: CallMessage = {\n      call: {\n        id: callId,\n        target: { cap: capId },\n        member,\n        args\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      // Set up timeout\n      const timeout = setTimeout(() => {\n        this.pendingCalls.delete(callId)\n        reject(new Error(`Call timeout after ${this.config.timeout}ms`))\n      }, this.config.timeout)\n\n      this.pendingCalls.set(callId, { resolve, reject, timeout })\n\n      // Send the message\n      this.transport.send(message).catch(error => {\n        this.pendingCalls.delete(callId)\n        clearTimeout(timeout)\n        reject(error)\n      })\n    })\n  }\n\n  async executePlan(plan: Plan, params?: Record<string, unknown>): Promise<unknown> {\n    // For now, we'll execute plans by converting them to individual calls\n    // A full implementation would send the plan to a plan execution endpoint\n    this.logger.debug('Executing plan:', plan)\n\n    // This is a simplified implementation\n    // In practice, you'd send the plan to the server for execution\n    throw new Error('Plan execution not yet implemented in TypeScript client')\n  }\n\n  async dispose(capIds: CapId[]): Promise<void> {\n    const message = {\n      dispose: {\n        caps: capIds\n      }\n    }\n\n    await this.transport.send(message)\n    this.logger.debug(`Disposed capabilities: ${capIds.join(', ')}`)\n  }\n\n  async close(): Promise<void> {\n    this.isListening = false\n\n    // Reject all pending calls\n    for (const [callId, pendingCall] of this.pendingCalls) {\n      if (pendingCall.timeout) {\n        clearTimeout(pendingCall.timeout)\n      }\n      pendingCall.reject(new Error('Client closed'))\n    }\n    this.pendingCalls.clear()\n\n    await this.transport.close()\n  }\n}\n\n/**\n * Utility class for building Cap'n Web plans in TypeScript\n */\nexport class PlanBuilder {\n  private captures: CapId[] = []\n  private ops: any[] = []\n  private nextResult = 0\n\n  capture(capId: CapId): CapRef {\n    const index = this.captures.length\n    this.captures.push(capId)\n    return new CapRef(this, index)\n  }\n\n  addOp(op: any): ResultRef {\n    const resultIndex = this.nextResult++\n    this.ops.push({ ...op, result: resultIndex })\n    return new ResultRef(this, resultIndex)\n  }\n\n  build(result: Source): Plan {\n    return {\n      captures: this.captures,\n      ops: this.ops,\n      result\n    }\n  }\n\n  object(fields: Record<string, Source>): ResultRef {\n    return this.addOp({\n      object: {\n        fields\n      }\n    })\n  }\n\n  array(items: Source[]): ResultRef {\n    return this.addOp({\n      array: {\n        items\n      }\n    })\n  }\n}\n\nexport class CapRef {\n  constructor(\n    private builder: PlanBuilder,\n    private index: number\n  ) {}\n\n  call(member: string, args: Source[]): ResultRef {\n    return this.builder.addOp({\n      call: {\n        target: { capture: { index: this.index } },\n        member,\n        args\n      }\n    })\n  }\n\n  asSource(): Source {\n    return { capture: { index: this.index } }\n  }\n}\n\nexport class ResultRef {\n  constructor(\n    private builder: PlanBuilder,\n    private index: number\n  ) {}\n\n  call(member: string, args: Source[]): ResultRef {\n    return this.builder.addOp({\n      call: {\n        target: { result: { index: this.index } },\n        member,\n        args\n      }\n    })\n  }\n\n  asSource(): Source {\n    return { result: { index: this.index } }\n  }\n}\n\n// Utility functions for creating sources\nexport const Param = {\n  path: (path: string[]): Source => ({\n    param: { path }\n  }),\n\n  value: (value: JsonValue): Source => ({\n    byValue: { value }\n  })\n}\n\n// Type guards\nexport function isCallMessage(message: Message): message is CallMessage {\n  return 'call' in message\n}\n\nexport function isResultMessage(message: Message): message is ResultMessage {\n  return 'result' in message\n}"]}
{"version":3,"sources":["../../src/capnweb/server.ts"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["/**\n * Cap'n Web TypeScript Server\n *\n * A TypeScript server implementation for testing Rust client interoperability.\n */\n\nimport WebSocket, { WebSocketServer } from 'ws'\nimport type {\n  Message,\n  CallMessage,\n  ResultMessage,\n  CapRefMessage,\n  DisposeMessage,\n  Capability,\n  CapId,\n  CallId,\n  ServerConfig,\n  Logger\n} from './types.js'\n\ninterface RegisteredCapability {\n  capability: Capability\n  refCount: number\n}\n\nexport class CapnWebServer {\n  private wss: WebSocketServer | null = null\n  private capabilities = new Map<CapId, RegisteredCapability>()\n  private config: ServerConfig\n  private logger: Logger\n\n  constructor(config: ServerConfig = {}, logger?: Logger) {\n    this.config = {\n      port: 8080,\n      host: 'localhost',\n      path: '/ws',\n      ...config\n    }\n    this.logger = logger || console\n  }\n\n  registerCapability(capId: CapId, capability: Capability): void {\n    this.capabilities.set(capId, {\n      capability,\n      refCount: 0\n    })\n    this.logger.info(`Registered capability ${capId}`)\n  }\n\n  async start(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.wss = new WebSocketServer({\n          port: this.config.port,\n          host: this.config.host,\n          path: this.config.path\n        })\n\n        this.wss.on('connection', (ws) => {\n          this.logger.info('New WebSocket connection')\n          this.handleConnection(ws)\n        })\n\n        this.wss.on('listening', () => {\n          this.logger.info(`Server listening on ${this.config.host}:${this.config.port}${this.config.path}`)\n          resolve()\n        })\n\n        this.wss.on('error', (error) => {\n          this.logger.error('Server error:', error)\n          reject(error)\n        })\n      } catch (error) {\n        reject(error)\n      }\n    })\n  }\n\n  private handleConnection(ws: WebSocket): void {\n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString()) as Message\n        this.logger.debug('Received message:', message)\n\n        const response = await this.handleMessage(message)\n        if (response) {\n          const responseJson = JSON.stringify(response)\n          this.logger.debug('Sending response:', response)\n          ws.send(responseJson)\n        }\n      } catch (error) {\n        this.logger.error('Error handling message:', error)\n\n        // Send error response if possible\n        const errorResponse: ResultMessage = {\n          result: {\n            id: 0, // We don't have the original call ID\n            error: {\n              error: {\n                code: 'INTERNAL_ERROR',\n                message: error instanceof Error ? error.message : 'Unknown error'\n              }\n            }\n          }\n        }\n        ws.send(JSON.stringify(errorResponse))\n      }\n    })\n\n    ws.on('close', () => {\n      this.logger.info('WebSocket connection closed')\n    })\n\n    ws.on('error', (error) => {\n      this.logger.error('WebSocket error:', error)\n    })\n  }\n\n  private async handleMessage(message: Message): Promise<Message | null> {\n    if ('call' in message) {\n      return this.handleCall(message as CallMessage)\n    } else if ('capRef' in message) {\n      return this.handleCapRef(message as CapRefMessage)\n    } else if ('dispose' in message) {\n      return this.handleDispose(message as DisposeMessage)\n    } else {\n      this.logger.warn('Unknown message type:', message)\n      return null\n    }\n  }\n\n  private async handleCall(message: CallMessage): Promise<ResultMessage> {\n    const { id, target, member, args } = message.call\n\n    try {\n      // Extract capability ID from target\n      let capId: CapId\n      if ('cap' in target) {\n        capId = target.cap\n      } else {\n        throw new Error('Promise targets not yet supported')\n      }\n\n      const registered = this.capabilities.get(capId)\n      if (!registered) {\n        throw new Error(`Capability ${capId} not found`)\n      }\n\n      const result = await registered.capability.call(member, args)\n\n      return {\n        result: {\n          id,\n          success: {\n            value: result\n          }\n        }\n      }\n    } catch (error) {\n      this.logger.error('Call failed:', error)\n\n      return {\n        result: {\n          id,\n          error: {\n            error: {\n              code: 'CALL_FAILED',\n              message: error instanceof Error ? error.message : 'Unknown error',\n              data: error instanceof Error ? { stack: error.stack } : undefined\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private async handleCapRef(message: CapRefMessage): Promise<Message | null> {\n    const { id } = message.capRef\n\n    const registered = this.capabilities.get(id)\n    if (registered) {\n      registered.refCount++\n      this.logger.debug(`Incremented ref count for capability ${id} to ${registered.refCount}`)\n    }\n\n    // Cap refs don't require a response in the basic protocol\n    return null\n  }\n\n  private async handleDispose(message: DisposeMessage): Promise<Message | null> {\n    const { caps } = message.dispose\n\n    for (const capId of caps) {\n      const registered = this.capabilities.get(capId)\n      if (registered) {\n        registered.refCount = Math.max(0, registered.refCount - 1)\n        this.logger.debug(`Decremented ref count for capability ${capId} to ${registered.refCount}`)\n\n        if (registered.refCount === 0 && registered.capability.dispose) {\n          try {\n            await registered.capability.dispose()\n            this.logger.info(`Disposed capability ${capId}`)\n          } catch (error) {\n            this.logger.error(`Error disposing capability ${capId}:`, error)\n          }\n        }\n      }\n    }\n\n    // Dispose messages don't require a response\n    return null\n  }\n\n  async stop(): Promise<void> {\n    if (this.wss) {\n      return new Promise((resolve) => {\n        this.wss!.close(() => {\n          this.logger.info('Server stopped')\n          resolve()\n        })\n      })\n    }\n  }\n}\n\n/**\n * Mock capabilities for testing\n */\nexport class MockCalculator implements Capability {\n  async call(member: string, args: unknown[]): Promise<unknown> {\n    switch (member) {\n      case 'add':\n        if (args.length !== 2) throw new Error('add requires 2 arguments')\n        return (args[0] as number) + (args[1] as number)\n\n      case 'subtract':\n        if (args.length !== 2) throw new Error('subtract requires 2 arguments')\n        return (args[0] as number) - (args[1] as number)\n\n      case 'multiply':\n        if (args.length !== 2) throw new Error('multiply requires 2 arguments')\n        return (args[0] as number) * (args[1] as number)\n\n      case 'divide':\n        if (args.length !== 2) throw new Error('divide requires 2 arguments')\n        const divisor = args[1] as number\n        if (divisor === 0) throw new Error('Division by zero')\n        return (args[0] as number) / divisor\n\n      case 'power':\n        if (args.length !== 2) throw new Error('power requires 2 arguments')\n        return Math.pow(args[0] as number, args[1] as number)\n\n      case 'sqrt':\n        if (args.length !== 1) throw new Error('sqrt requires 1 argument')\n        const value = args[0] as number\n        if (value < 0) throw new Error('Cannot take square root of negative number')\n        return Math.sqrt(value)\n\n      case 'factorial':\n        if (args.length !== 1) throw new Error('factorial requires 1 argument')\n        const n = args[0] as number\n        if (n < 0) throw new Error('Factorial not defined for negative numbers')\n        if (n > 20) throw new Error('Factorial too large (max 20)')\n        let result = 1\n        for (let i = 1; i <= n; i++) {\n          result *= i\n        }\n        return result\n\n      default:\n        throw new Error(`Unknown method: ${member}`)\n    }\n  }\n}\n\nexport class MockUserManager implements Capability {\n  private users = new Map([\n    [1, { id: 1, name: 'Alice', email: 'alice@example.com', role: 'admin' }],\n    [2, { id: 2, name: 'Bob', email: 'bob@example.com', role: 'user' }],\n    [3, { id: 3, name: 'Charlie', email: 'charlie@example.com', role: 'user' }]\n  ])\n\n  async call(member: string, args: unknown[]): Promise<unknown> {\n    switch (member) {\n      case 'getUser':\n        if (args.length !== 1) throw new Error('getUser requires 1 argument')\n        const userId = args[0] as number\n        const user = this.users.get(userId)\n        if (!user) throw new Error('User not found')\n        return user\n\n      case 'createUser':\n        if (args.length !== 1) throw new Error('createUser requires 1 argument')\n        const userData = args[0] as any\n        const newUser = {\n          id: 999,\n          name: userData.name || 'Unknown',\n          email: userData.email || 'unknown@example.com',\n          role: 'user',\n          created: true\n        }\n        return newUser\n\n      default:\n        throw new Error(`Unknown method: ${member}`)\n    }\n  }\n}"]}
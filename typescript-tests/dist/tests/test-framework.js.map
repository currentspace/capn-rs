{"version":3,"sources":["../../src/tests/test-framework.ts"],"names":[],"mappings":"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","file":"test-framework.js","sourcesContent":["/**\n * TypeScript Test Framework for Cap'n Web Interoperability\n *\n * A comprehensive test framework for verifying interoperability between\n * TypeScript and Rust Cap'n Web implementations.\n */\n\nimport { test, describe } from 'node:test'\nimport assert from 'node:assert'\nimport type { Logger } from '../capnweb/types.js'\n\nexport interface TestResult {\n  name: string\n  passed: boolean\n  error?: Error\n  duration: number\n  details?: string\n}\n\nexport interface TestSuite {\n  name: string\n  results: TestResult[]\n  totalPassed: number\n  totalFailed: number\n  totalDuration: number\n}\n\nexport class InteropTestFramework {\n  private logger: Logger\n  private suites: TestSuite[] = []\n\n  constructor(logger?: Logger) {\n    this.logger = logger || console\n  }\n\n  async runTestSuite(\n    name: string,\n    testFunctions: Array<() => Promise<void>>\n  ): Promise<TestSuite> {\n    this.logger.info(`\\n🚀 Running test suite: ${name}`)\n    this.logger.info('='.repeat(50))\n\n    const suite: TestSuite = {\n      name,\n      results: [],\n      totalPassed: 0,\n      totalFailed: 0,\n      totalDuration: 0\n    }\n\n    for (let i = 0; i < testFunctions.length; i++) {\n      const testFunc = testFunctions[i]\n      const testName = testFunc.name || `Test ${i + 1}`\n\n      const result = await this.runSingleTest(testName, testFunc)\n      suite.results.push(result)\n\n      if (result.passed) {\n        suite.totalPassed++\n      } else {\n        suite.totalFailed++\n      }\n\n      suite.totalDuration += result.duration\n    }\n\n    this.suites.push(suite)\n    this.logSuiteResults(suite)\n\n    return suite\n  }\n\n  private async runSingleTest(\n    name: string,\n    testFunc: () => Promise<void>\n  ): Promise<TestResult> {\n    const startTime = Date.now()\n\n    try {\n      this.logger.info(`📋 Running: ${name}`)\n      await testFunc()\n      const duration = Date.now() - startTime\n\n      this.logger.info(`✅ PASSED: ${name} (${duration}ms)`)\n      return {\n        name,\n        passed: true,\n        duration\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime\n      const testError = error instanceof Error ? error : new Error(String(error))\n\n      this.logger.error(`❌ FAILED: ${name} (${duration}ms)`)\n      this.logger.error(`   Error: ${testError.message}`)\n      if (testError.stack) {\n        this.logger.error(`   Stack: ${testError.stack}`)\n      }\n\n      return {\n        name,\n        passed: false,\n        error: testError,\n        duration\n      }\n    }\n  }\n\n  private logSuiteResults(suite: TestSuite): void {\n    this.logger.info('\\n📊 Test Suite Results:')\n    this.logger.info(`   Total: ${suite.results.length}`)\n    this.logger.info(`   Passed: ${suite.totalPassed}`)\n    this.logger.info(`   Failed: ${suite.totalFailed}`)\n    this.logger.info(`   Duration: ${suite.totalDuration}ms`)\n\n    if (suite.totalFailed > 0) {\n      this.logger.error('\\n🔥 Failed Tests:')\n      suite.results\n        .filter(r => !r.passed)\n        .forEach(r => {\n          this.logger.error(`   - ${r.name}: ${r.error?.message}`)\n        })\n    }\n  }\n\n  generateReport(): void {\n    this.logger.info('\\n🎯 INTEROPERABILITY TEST REPORT')\n    this.logger.info('='.repeat(60))\n\n    let totalTests = 0\n    let totalPassed = 0\n    let totalFailed = 0\n    let totalDuration = 0\n\n    for (const suite of this.suites) {\n      totalTests += suite.results.length\n      totalPassed += suite.totalPassed\n      totalFailed += suite.totalFailed\n      totalDuration += suite.totalDuration\n\n      this.logger.info(`\\n📦 ${suite.name}:`)\n      this.logger.info(`   Tests: ${suite.results.length}`)\n      this.logger.info(`   Passed: ${suite.totalPassed}`)\n      this.logger.info(`   Failed: ${suite.totalFailed}`)\n      this.logger.info(`   Duration: ${suite.totalDuration}ms`)\n    }\n\n    this.logger.info('\\n🏆 OVERALL RESULTS:')\n    this.logger.info(`   Total Tests: ${totalTests}`)\n    this.logger.info(`   Passed: ${totalPassed}`)\n    this.logger.info(`   Failed: ${totalFailed}`)\n    this.logger.info(`   Success Rate: ${((totalPassed / totalTests) * 100).toFixed(1)}%`)\n    this.logger.info(`   Total Duration: ${totalDuration}ms`)\n\n    if (totalFailed === 0) {\n      this.logger.info('\\n🎉 ALL TESTS PASSED! TypeScript ↔ Rust interoperability verified!')\n    } else {\n      this.logger.error(`\\n💥 ${totalFailed} tests failed. Interoperability issues detected.`)\n    }\n  }\n\n  getAllResults(): TestSuite[] {\n    return this.suites\n  }\n\n  getOverallStats() {\n    const totalTests = this.suites.reduce((sum, suite) => sum + suite.results.length, 0)\n    const totalPassed = this.suites.reduce((sum, suite) => sum + suite.totalPassed, 0)\n    const totalFailed = this.suites.reduce((sum, suite) => sum + suite.totalFailed, 0)\n    const totalDuration = this.suites.reduce((sum, suite) => sum + suite.totalDuration, 0)\n\n    return {\n      totalTests,\n      totalPassed,\n      totalFailed,\n      totalDuration,\n      successRate: totalTests > 0 ? (totalPassed / totalTests) * 100 : 0\n    }\n  }\n}\n\n// Utility functions for assertions\nexport class InteropAssert {\n  static equal(actual: unknown, expected: unknown, message?: string): void {\n    assert.strictEqual(actual, expected, message)\n  }\n\n  static deepEqual(actual: unknown, expected: unknown, message?: string): void {\n    assert.deepStrictEqual(actual, expected, message)\n  }\n\n  static ok(value: unknown, message?: string): void {\n    assert.ok(value, message)\n  }\n\n  static throws(fn: () => void, message?: string): void {\n    assert.throws(fn, message)\n  }\n\n  static async rejects(promise: Promise<unknown>, message?: string): Promise<void> {\n    await assert.rejects(promise, message)\n  }\n\n  static async doesNotReject(promise: Promise<unknown>, message?: string): Promise<void> {\n    await assert.doesNotReject(promise, message)\n  }\n\n  static isNumber(value: unknown, message?: string): void {\n    assert.ok(typeof value === 'number', message || `Expected number, got ${typeof value}`)\n  }\n\n  static isString(value: unknown, message?: string): void {\n    assert.ok(typeof value === 'string', message || `Expected string, got ${typeof value}`)\n  }\n\n  static isObject(value: unknown, message?: string): void {\n    assert.ok(typeof value === 'object' && value !== null, message || `Expected object, got ${typeof value}`)\n  }\n\n  static isArray(value: unknown, message?: string): void {\n    assert.ok(Array.isArray(value), message || `Expected array, got ${typeof value}`)\n  }\n\n  static hasProperty(obj: object, property: string, message?: string): void {\n    assert.ok(property in obj, message || `Expected object to have property '${property}'`)\n  }\n\n  static approximatelyEqual(actual: number, expected: number, tolerance = 0.0001, message?: string): void {\n    const diff = Math.abs(actual - expected)\n    assert.ok(\n      diff <= tolerance,\n      message || `Expected ${actual} to be approximately ${expected} (tolerance: ${tolerance}), diff: ${diff}`\n    )\n  }\n}\n\n// Utility for timing operations\nexport class Timer {\n  private startTime: number = 0\n\n  start(): void {\n    this.startTime = Date.now()\n  }\n\n  elapsed(): number {\n    return Date.now() - this.startTime\n  }\n\n  static async measure<T>(operation: () => Promise<T>): Promise<{ result: T; duration: number }> {\n    const start = Date.now()\n    const result = await operation()\n    const duration = Date.now() - start\n    return { result, duration }\n  }\n}\n\n// Utility for waiting\nexport const wait = (ms: number): Promise<void> => new Promise(resolve => setTimeout(resolve, ms))"]}
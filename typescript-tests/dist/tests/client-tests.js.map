{"version":3,"sources":["../../src/tests/client-tests.ts"],"names":[],"mappings":"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","file":"client-tests.js","sourcesContent":["/**\n * TypeScript Client Tests Against Rust Server\n *\n * Tests the TypeScript Cap'n Web client against the Rust server implementation\n * to verify complete interoperability.\n */\n\nimport { CapnWebClient, PlanBuilder, Param } from '../capnweb/client.js'\nimport { WebSocketTransport } from '../capnweb/websocket-transport.js'\nimport { InteropTestFramework, InteropAssert, Timer, wait } from './test-framework.js'\n\nconst RUST_SERVER_URL = 'ws://localhost:8080/ws'\nconst CONNECTION_TIMEOUT = 5000\nconst TEST_TIMEOUT = 10000\n\nexport class TypeScriptClientTests {\n  private framework: InteropTestFramework\n  private client: CapnWebClient | null = null\n  private transport: WebSocketTransport | null = null\n\n  constructor() {\n    this.framework = new InteropTestFramework(console)\n  }\n\n  async runAllTests(): Promise<void> {\n    console.log('🔥 TypeScript Client → Rust Server Interoperability Tests')\n    console.log('📡 Testing TypeScript client against Rust server...')\n\n    try {\n      await this.framework.runTestSuite('Connection Tests', [\n        this.testConnection.bind(this),\n        this.testConnectionTimeout.bind(this)\n      ])\n\n      await this.framework.runTestSuite('Basic Capability Tests', [\n        this.testBasicCalculatorOperations.bind(this),\n        this.testCalculatorErrorHandling.bind(this),\n        this.testMultipleSequentialCalls.bind(this),\n        this.testConcurrentCalls.bind(this)\n      ])\n\n      await this.framework.runTestSuite('Advanced Mathematical Operations', [\n        this.testAdvancedMathOperations.bind(this),\n        this.testFactorialOperations.bind(this),\n        this.testErrorConditions.bind(this)\n      ])\n\n      await this.framework.runTestSuite('User Management Tests', [\n        this.testUserManagement.bind(this),\n        this.testUserNotFound.bind(this),\n        this.testCreateUser.bind(this)\n      ])\n\n      await this.framework.runTestSuite('Performance Tests', [\n        this.testPerformance.bind(this),\n        this.testHighVolumeOperations.bind(this)\n      ])\n\n      await this.framework.runTestSuite('Edge Cases', [\n        this.testLargeNumbers.bind(this),\n        this.testInvalidArguments.bind(this),\n        this.testInvalidMethods.bind(this)\n      ])\n\n    } finally {\n      await this.cleanup()\n    }\n\n    this.framework.generateReport()\n  }\n\n  private async setupClient(): Promise<void> {\n    if (this.client) {\n      await this.cleanup()\n    }\n\n    this.transport = new WebSocketTransport(RUST_SERVER_URL, console)\n    await this.transport.connect()\n\n    this.client = new CapnWebClient(this.transport, {\n      timeout: TEST_TIMEOUT\n    }, console)\n\n    await this.client.connect()\n  }\n\n  private async cleanup(): Promise<void> {\n    if (this.client) {\n      await this.client.close()\n      this.client = null\n    }\n    if (this.transport) {\n      await this.transport.close()\n      this.transport = null\n    }\n  }\n\n  // Connection Tests\n  private async testConnection(): Promise<void> {\n    await this.setupClient()\n    InteropAssert.ok(this.client, 'Client should be connected')\n  }\n\n  private async testConnectionTimeout(): Promise<void> {\n    const badTransport = new WebSocketTransport('ws://localhost:9999/nonexistent')\n    let failed = false\n    try {\n      await badTransport.connect()\n    } catch (error) {\n      failed = true\n    }\n    InteropAssert.ok(failed, 'Connection to nonexistent server should fail')\n  }\n\n  // Basic Capability Tests\n  private async testBasicCalculatorOperations(): Promise<void> {\n    await this.setupClient()\n\n    // Test addition\n    const addResult = await this.client!.call(1, 'add', [15.5, 24.3])\n    InteropAssert.approximatelyEqual(addResult as number, 39.8, 0.01, 'Addition result should be correct')\n\n    // Test subtraction\n    const subResult = await this.client!.call(1, 'subtract', [50, 18])\n    InteropAssert.equal(subResult, 32, 'Subtraction result should be correct')\n\n    // Test multiplication\n    const mulResult = await this.client!.call(1, 'multiply', [7, 8])\n    InteropAssert.equal(mulResult, 56, 'Multiplication result should be correct')\n\n    // Test division\n    const divResult = await this.client!.call(1, 'divide', [84, 7])\n    InteropAssert.equal(divResult, 12, 'Division result should be correct')\n  }\n\n  private async testCalculatorErrorHandling(): Promise<void> {\n    await this.setupClient()\n\n    // Test division by zero\n    try {\n      await this.client!.call(1, 'divide', [10, 0])\n      throw new Error('Should have thrown division by zero error')\n    } catch (error) {\n      InteropAssert.ok(\n        error instanceof Error && error.message.toLowerCase().includes('zero'),\n        'Should throw division by zero error'\n      )\n    }\n\n    // Test invalid argument count\n    try {\n      await this.client!.call(1, 'add', [5])\n      throw new Error('Should have thrown argument count error')\n    } catch (error) {\n      InteropAssert.ok(error instanceof Error, 'Should throw argument error')\n    }\n  }\n\n  private async testMultipleSequentialCalls(): Promise<void> {\n    await this.setupClient()\n\n    const operations = [\n      { method: 'add', args: [1, 2], expected: 3 },\n      { method: 'multiply', args: [3, 4], expected: 12 },\n      { method: 'subtract', args: [10, 3], expected: 7 },\n      { method: 'divide', args: [20, 4], expected: 5 }\n    ]\n\n    for (const op of operations) {\n      const result = await this.client!.call(1, op.method, op.args)\n      InteropAssert.equal(result, op.expected, `${op.method} should return correct result`)\n    }\n  }\n\n  private async testConcurrentCalls(): Promise<void> {\n    await this.setupClient()\n\n    const promises = [\n      this.client!.call(1, 'add', [1, 1]),\n      this.client!.call(1, 'add', [2, 2]),\n      this.client!.call(1, 'add', [3, 3]),\n      this.client!.call(1, 'add', [4, 4]),\n      this.client!.call(1, 'add', [5, 5])\n    ]\n\n    const results = await Promise.all(promises)\n    InteropAssert.deepEqual(results, [2, 4, 6, 8, 10], 'Concurrent calls should all succeed')\n  }\n\n  // Advanced Mathematical Operations\n  private async testAdvancedMathOperations(): Promise<void> {\n    await this.setupClient()\n\n    // Test power operation\n    const powerResult = await this.client!.call(1, 'power', [2, 10])\n    InteropAssert.equal(powerResult, 1024, 'Power operation should be correct')\n\n    // Test square root\n    const sqrtResult = await this.client!.call(1, 'sqrt', [144])\n    InteropAssert.equal(sqrtResult, 12, 'Square root should be correct')\n\n    // Test square root of decimal\n    const sqrtDecimalResult = await this.client!.call(1, 'sqrt', [2])\n    InteropAssert.approximatelyEqual(sqrtDecimalResult as number, 1.4142135623730951, 0.0001, 'Square root of 2 should be correct')\n  }\n\n  private async testFactorialOperations(): Promise<void> {\n    await this.setupClient()\n\n    // Test factorial\n    const factorialResult = await this.client!.call(1, 'factorial', [5])\n    InteropAssert.equal(factorialResult, 120, 'Factorial of 5 should be 120')\n\n    // Test factorial of 0\n    const factorial0Result = await this.client!.call(1, 'factorial', [0])\n    InteropAssert.equal(factorial0Result, 1, 'Factorial of 0 should be 1')\n  }\n\n  private async testErrorConditions(): Promise<void> {\n    await this.setupClient()\n\n    // Test negative square root\n    try {\n      await this.client!.call(1, 'sqrt', [-1])\n      throw new Error('Should have thrown negative square root error')\n    } catch (error) {\n      InteropAssert.ok(error instanceof Error, 'Should throw error for negative square root')\n    }\n\n    // Test negative factorial\n    try {\n      await this.client!.call(1, 'factorial', [-1])\n      throw new Error('Should have thrown negative factorial error')\n    } catch (error) {\n      InteropAssert.ok(error instanceof Error, 'Should throw error for negative factorial')\n    }\n\n    // Test factorial too large\n    try {\n      await this.client!.call(1, 'factorial', [25])\n      throw new Error('Should have thrown factorial too large error')\n    } catch (error) {\n      InteropAssert.ok(error instanceof Error, 'Should throw error for factorial too large')\n    }\n  }\n\n  // User Management Tests\n  private async testUserManagement(): Promise<void> {\n    await this.setupClient()\n\n    // Test getting existing users\n    const user1 = await this.client!.call(100, 'getUser', [1]) as any\n    InteropAssert.equal(user1.id, 1, 'User 1 should have correct ID')\n    InteropAssert.equal(user1.name, 'Alice', 'User 1 should have correct name')\n\n    const user2 = await this.client!.call(100, 'getUser', [2]) as any\n    InteropAssert.equal(user2.id, 2, 'User 2 should have correct ID')\n    InteropAssert.equal(user2.name, 'Bob', 'User 2 should have correct name')\n  }\n\n  private async testUserNotFound(): Promise<void> {\n    await this.setupClient()\n\n    try {\n      await this.client!.call(100, 'getUser', [999])\n      throw new Error('Should have thrown user not found error')\n    } catch (error) {\n      InteropAssert.ok(\n        error instanceof Error && error.message.toLowerCase().includes('not found'),\n        'Should throw user not found error'\n      )\n    }\n  }\n\n  private async testCreateUser(): Promise<void> {\n    await this.setupClient()\n\n    const userData = {\n      name: 'Test User',\n      email: 'test@example.com'\n    }\n\n    const newUser = await this.client!.call(100, 'createUser', [userData]) as any\n    InteropAssert.equal(newUser.name, 'Test User', 'Created user should have correct name')\n    InteropAssert.equal(newUser.email, 'test@example.com', 'Created user should have correct email')\n    InteropAssert.ok(newUser.created, 'Created user should have created flag')\n  }\n\n  // Performance Tests\n  private async testPerformance(): Promise<void> {\n    await this.setupClient()\n\n    const { result, duration } = await Timer.measure(async () => {\n      const promises = Array.from({ length: 100 }, (_, i) =>\n        this.client!.call(1, 'add', [i, i])\n      )\n      return Promise.all(promises)\n    })\n\n    console.log(`   Performance: 100 concurrent calls completed in ${duration}ms`)\n    InteropAssert.equal(result.length, 100, 'Should complete all 100 calls')\n    InteropAssert.ok(duration < 5000, 'Should complete within 5 seconds')\n  }\n\n  private async testHighVolumeOperations(): Promise<void> {\n    await this.setupClient()\n\n    // Test rapid sequential operations\n    const startTime = Date.now()\n    for (let i = 0; i < 50; i++) {\n      const result = await this.client!.call(1, 'multiply', [i, 2])\n      InteropAssert.equal(result, i * 2, `Operation ${i} should be correct`)\n    }\n    const duration = Date.now() - startTime\n\n    console.log(`   High Volume: 50 sequential calls completed in ${duration}ms`)\n    InteropAssert.ok(duration < 10000, 'Should complete within 10 seconds')\n  }\n\n  // Edge Cases\n  private async testLargeNumbers(): Promise<void> {\n    await this.setupClient()\n\n    // Test with large numbers\n    const largeNum1 = 1000000\n    const largeNum2 = 999999\n    const result = await this.client!.call(1, 'add', [largeNum1, largeNum2])\n    InteropAssert.equal(result, 1999999, 'Should handle large numbers correctly')\n\n    // Test with very small numbers\n    const smallNum1 = 0.000001\n    const smallNum2 = 0.000002\n    const smallResult = await this.client!.call(1, 'add', [smallNum1, smallNum2])\n    InteropAssert.approximatelyEqual(smallResult as number, 0.000003, 0.0000001, 'Should handle small numbers correctly')\n  }\n\n  private async testInvalidArguments(): Promise<void> {\n    await this.setupClient()\n\n    // Test with wrong number of arguments\n    try {\n      await this.client!.call(1, 'add', [1, 2, 3])\n      throw new Error('Should reject too many arguments')\n    } catch (error) {\n      InteropAssert.ok(error instanceof Error, 'Should throw error for wrong argument count')\n    }\n\n    // Test with no arguments\n    try {\n      await this.client!.call(1, 'add', [])\n      throw new Error('Should reject no arguments')\n    } catch (error) {\n      InteropAssert.ok(error instanceof Error, 'Should throw error for no arguments')\n    }\n  }\n\n  private async testInvalidMethods(): Promise<void> {\n    await this.setupClient()\n\n    try {\n      await this.client!.call(1, 'nonexistentMethod', [1, 2])\n      throw new Error('Should reject nonexistent method')\n    } catch (error) {\n      InteropAssert.ok(\n        error instanceof Error && error.message.toLowerCase().includes('not found'),\n        'Should throw method not found error'\n      )\n    }\n  }\n}\n\n// Main execution function\nexport async function runClientTests(): Promise<void> {\n  const tests = new TypeScriptClientTests()\n  await tests.runAllTests()\n}"]}
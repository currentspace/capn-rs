name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run at 3 AM UTC every Monday to catch dependency issues
    - cron: '0 3 * * 1'
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

# Cancel previous runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Only test nightly on Linux to save CI time
          - os: macos-latest
            rust: nightly
          - os: windows-latest
            rust: nightly
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better caching

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v1-rust
          key: ${{ matrix.os }}-${{ matrix.rust }}

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Build
        run: cargo build --workspace --all-features --release

      - name: Run tests with nextest
        run: cargo nextest run --workspace --all-features --release --no-fail-fast

      - name: Run doctests
        run: cargo test --doc --workspace --all-features

      - name: Build examples
        run: cargo build --examples --release

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v1-rust-coverage

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Generate coverage
        run: cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v1-rust-lint

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: |
          cargo clippy --workspace --all-features --tests --examples -- \
            -D warnings

      - name: Check for banned dependencies
        run: |
          if cargo tree -p capnweb-core | grep -E "(openssl|native-tls)"; then
            echo "Found banned dependencies (openssl/native-tls). Use rustls instead."
            exit 1
          fi

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v1-rust-docs

      - name: Check documentation
        run: cargo +nightly doc --workspace --no-deps --all-features --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings --cfg docsrs"

      - name: Test documentation examples
        run: cargo test --doc --workspace --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Run security audit
        run: cargo audit --deny warnings

      - name: Install cargo-deny
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny

      - name: Check licenses and dependencies
        run: cargo deny check

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Install MSRV (1.85)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.85"

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v1-rust-msrv

      - name: Check MSRV
        run: cargo check --workspace --all-features

  minimal-versions:
    name: Minimal Dependency Versions
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # Temporarily disabled - less critical than other checks
    if: false
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v1-rust-minimal

      - name: Check with minimal versions
        run: |
          cargo +nightly update -Z minimal-versions
          cargo +nightly check --workspace --all-features

  publish-check:
    name: Publish Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v1-rust-publish

      - name: Install cargo-semver-checks
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-semver-checks

      # Skip semver checks for unpublished crates
      # - name: Check semver compatibility
      #   run: cargo semver-checks check-release --workspace
      #   continue-on-error: true  # Don't fail on first release

      - name: Check capnweb-core manifest
        run: cargo check --package capnweb-core --no-default-features

      - name: Check capnweb-transport manifest
        run: cargo check --package capnweb-transport --no-default-features

      - name: Check capnweb-server manifest
        run: cargo check --package capnweb-server --no-default-features

      - name: Check capnweb-client manifest
        run: cargo check --package capnweb-client --no-default-features

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Disabled until benchmarks are implemented
    if: false # github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v1-rust-bench

      - name: Install cargo-criterion
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-criterion

      - name: Run benchmarks
        run: cargo criterion --workspace --message-format json > criterion.json

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: criterion.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: '150%'
          fail-on-alert: false

  result:
    name: CI Result
    runs-on: ubuntu-latest
    if: always()
    needs:
      - test
      - coverage
      - lint
      - docs
      - security
      - msrv
      - minimal-versions
      - publish-check
    steps:
      - name: Check if all jobs passed
        run: |
          if [[ "${{ needs.test.result }}" != "success" || \
                "${{ needs.lint.result }}" != "success" || \
                "${{ needs.docs.result }}" != "success" || \
                "${{ needs.security.result }}" != "success" || \
                "${{ needs.msrv.result }}" != "success" ]]; then
            echo "One or more required jobs failed"
            exit 1
          fi
          echo "All required jobs passed!"
{"version":3,"sources":["../src/official-client-test.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { newHttpBatchRpcSession } from 'capnweb';\n\n// Define the Calculator interface\ninterface Calculator {\n    add(a: number, b: number): Promise<number>;\n    multiply(a: number, b: number): Promise<number>;\n    divide(a: number, b: number): Promise<number>;\n    subtract(a: number, b: number): Promise<number>;\n}\n\nasync function testWithOfficialClient() {\n    console.log('🧪 Testing Cap\\'n Web Rust Server with Official TypeScript Client');\n    console.log('================================================================\\n');\n\n    try {\n        // Get port from command line or use default\n        const port = process.argv[2] || '8080';\n        const endpoint = `http://localhost:${port}/rpc/batch`;\n\n        // Create a session with the Rust server\n        // Note: The official client expects strongly-typed interfaces\n        // Our server needs to handle the protocol correctly\n        const session = newHttpBatchRpcSession<Calculator>(endpoint);\n\n        console.log('✅ Created session with Rust server');\n        console.log(`📍 Endpoint: ${endpoint}\\n`);\n\n        // Test 1: Basic addition\n        console.log('Test 1: Addition');\n        console.log('----------------');\n        try {\n            // This will generate: [\"push\", [\"import\", 0, [\"add\"], [5, 3]]]\n            const result = await session.add(5, 3);\n            console.log(`✅ add(5, 3) = ${result}`);\n\n            if (result !== 8) {\n                throw new Error(`Expected 8, got ${result}`);\n            }\n        } catch (error) {\n            console.log(`❌ Addition failed: ${error}`);\n        }\n\n        // Test 2: Multiplication\n        console.log('\\nTest 2: Multiplication');\n        console.log('----------------------');\n        try {\n            const result = await session.multiply(7, 6);\n            console.log(`✅ multiply(7, 6) = ${result}`);\n\n            if (result !== 42) {\n                throw new Error(`Expected 42, got ${result}`);\n            }\n        } catch (error) {\n            console.log(`❌ Multiplication failed: ${error}`);\n        }\n\n        // Test 3: Division\n        console.log('\\nTest 3: Division');\n        console.log('----------------');\n        try {\n            const result = await session.divide(100, 4);\n            console.log(`✅ divide(100, 4) = ${result}`);\n\n            if (result !== 25) {\n                throw new Error(`Expected 25, got ${result}`);\n            }\n        } catch (error) {\n            console.log(`❌ Division failed: ${error}`);\n        }\n\n        // Test 4: Subtraction\n        console.log('\\nTest 4: Subtraction');\n        console.log('-------------------');\n        try {\n            const result = await session.subtract(10, 7);\n            console.log(`✅ subtract(10, 7) = ${result}`);\n\n            if (result !== 3) {\n                throw new Error(`Expected 3, got ${result}`);\n            }\n        } catch (error) {\n            console.log(`❌ Subtraction failed: ${error}`);\n        }\n\n        // Test 5: Error handling (division by zero)\n        console.log('\\nTest 5: Error Handling');\n        console.log('----------------------');\n        try {\n            const result = await session.divide(10, 0);\n            console.log(`❌ Division by zero should have thrown an error, got: ${result}`);\n        } catch (error) {\n            console.log(`✅ Division by zero correctly threw error: ${error}`);\n        }\n\n        // Test 6: Promise pipelining (if supported)\n        console.log('\\nTest 6: Multiple Operations');\n        console.log('----------------------------');\n        try {\n            // Send multiple operations\n            const [sum, product] = await Promise.all([\n                session.add(10, 20),\n                session.multiply(5, 8)\n            ]);\n\n            console.log(`✅ Parallel operations:`);\n            console.log(`   add(10, 20) = ${sum}`);\n            console.log(`   multiply(5, 8) = ${product}`);\n\n            if (sum !== 30 || product !== 40) {\n                throw new Error(`Unexpected results: sum=${sum}, product=${product}`);\n            }\n        } catch (error) {\n            console.log(`❌ Parallel operations failed: ${error}`);\n        }\n\n        console.log('\\n' + '='.repeat(80));\n        console.log('🎉 VALIDATION SUMMARY');\n        console.log('='.repeat(80));\n        console.log('✅ Official Cap\\'n Web TypeScript client can communicate with Rust server!');\n        console.log('⚠️  Note: This validates basic protocol compatibility');\n        console.log('❌ Missing: Promise pipelining, WebSocket transport, full capability system');\n\n    } catch (error) {\n        console.error('\\n💥 Fatal error:', error);\n        console.error('\\nThis likely means the Rust server is not properly implementing');\n        console.error('the Cap\\'n Web protocol as expected by the official client.');\n        process.exit(1);\n    }\n}\n\n// Run the test\ntestWithOfficialClient().catch(error => {\n    console.error('Unhandled error:', error);\n    process.exit(1);\n});"],"mappings":"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","names":[]}
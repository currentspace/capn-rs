{"version":3,"sources":["../src/comprehensive-stateful-test.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { newHttpBatchRpcSession } from 'capnweb';\n\n// Define the Calculator interface for basic tests\ninterface Calculator {\n    add(a: number, b: number): Promise<number>;\n    multiply(a: number, b: number): Promise<number>;\n    divide(a: number, b: number): Promise<number>;\n    subtract(a: number, b: number): Promise<number>;\n}\n\n// Test configuration\nconst port = process.argv[2] || '9001';\nconst endpoint = `http://localhost:${port}/rpc/batch`;\n\nasync function testBasicCalculator() {\n    console.log('üßÆ Testing Basic Calculator Operations');\n    console.log('=====================================');\n\n    const session = newHttpBatchRpcSession<Calculator>(endpoint);\n    let passed = 0;\n    let total = 0;\n\n    // Test 1: Addition\n    total++;\n    try {\n        const result = await session.add(5, 3);\n        if (result === 8) {\n            console.log('‚úÖ Addition test passed');\n            passed++;\n        } else {\n            console.log(`‚ùå Addition test failed: expected 8, got ${result}`);\n        }\n    } catch (error) {\n        console.log(`‚ùå Addition test failed with error: ${error}`);\n    }\n\n    // Test 2: Multiplication\n    total++;\n    try {\n        const result = await session.multiply(7, 6);\n        if (result === 42) {\n            console.log('‚úÖ Multiplication test passed');\n            passed++;\n        } else {\n            console.log(`‚ùå Multiplication test failed: expected 42, got ${result}`);\n        }\n    } catch (error) {\n        console.log(`‚ùå Multiplication test failed with error: ${error}`);\n    }\n\n    // Test 3: Division\n    total++;\n    try {\n        const result = await session.divide(100, 4);\n        if (result === 25) {\n            console.log('‚úÖ Division test passed');\n            passed++;\n        } else {\n            console.log(`‚ùå Division test failed: expected 25, got ${result}`);\n        }\n    } catch (error) {\n        console.log(`‚ùå Division test failed with error: ${error}`);\n    }\n\n    // Test 4: Subtraction\n    total++;\n    try {\n        const result = await session.subtract(10, 7);\n        if (result === 3) {\n            console.log('‚úÖ Subtraction test passed');\n            passed++;\n        } else {\n            console.log(`‚ùå Subtraction test failed: expected 3, got ${result}`);\n        }\n    } catch (error) {\n        console.log(`‚ùå Subtraction test failed with error: ${error}`);\n    }\n\n    // Test 5: Error handling (division by zero)\n    total++;\n    try {\n        const result = await session.divide(10, 0);\n        console.log(`‚ùå Division by zero should have thrown an error, got: ${result}`);\n    } catch (error) {\n        console.log('‚úÖ Division by zero correctly threw error');\n        passed++;\n    }\n\n    console.log(`\\nüìä Basic Calculator: ${passed}/${total} tests passed\\n`);\n    return { passed, total };\n}\n\nasync function testConcurrentOperations() {\n    console.log('üîÑ Testing Concurrent Operations');\n    console.log('================================');\n\n    const session = newHttpBatchRpcSession<Calculator>(endpoint);\n    let passed = 0;\n    let total = 0;\n\n    // Test concurrent operations\n    total++;\n    try {\n        const start = Date.now();\n        const [sum, product, quotient, difference] = await Promise.all([\n            session.add(10, 20),\n            session.multiply(5, 8),\n            session.divide(100, 5),\n            session.subtract(50, 15)\n        ]);\n        const duration = Date.now() - start;\n\n        const expectedResults = [30, 40, 20, 35];\n        const actualResults = [sum, product, quotient, difference];\n\n        if (JSON.stringify(actualResults) === JSON.stringify(expectedResults)) {\n            console.log(`‚úÖ Concurrent operations passed (${duration}ms)`);\n            console.log(`   Results: ${actualResults.join(', ')}`);\n            passed++;\n        } else {\n            console.log(`‚ùå Concurrent operations failed:`);\n            console.log(`   Expected: ${expectedResults.join(', ')}`);\n            console.log(`   Actual: ${actualResults.join(', ')}`);\n        }\n    } catch (error) {\n        console.log(`‚ùå Concurrent operations failed with error: ${error}`);\n    }\n\n    console.log(`\\nüìä Concurrent Operations: ${passed}/${total} tests passed\\n`);\n    return { passed, total };\n}\n\nasync function testSessionPersistence() {\n    console.log('üíæ Testing Session Persistence');\n    console.log('==============================');\n\n    let passed = 0;\n    let total = 0;\n\n    // Test that sessions maintain state across requests\n    total++;\n    try {\n        // Create multiple sessions (would normally be different session IDs)\n        const session1 = newHttpBatchRpcSession<Calculator>(endpoint);\n        const session2 = newHttpBatchRpcSession<Calculator>(endpoint);\n\n        // Both should work independently\n        const [result1, result2] = await Promise.all([\n            session1.add(1, 2),\n            session2.multiply(3, 4)\n        ]);\n\n        if (result1 === 3 && result2 === 12) {\n            console.log('‚úÖ Multiple sessions work independently');\n            passed++;\n        } else {\n            console.log(`‚ùå Session independence failed: ${result1}, ${result2}`);\n        }\n    } catch (error) {\n        console.log(`‚ùå Session persistence test failed: ${error}`);\n    }\n\n    console.log(`\\nüìä Session Persistence: ${passed}/${total} tests passed\\n`);\n    return { passed, total };\n}\n\nasync function testErrorScenarios() {\n    console.log('‚ö†Ô∏è  Testing Error Scenarios');\n    console.log('===========================');\n\n    const session = newHttpBatchRpcSession<Calculator>(endpoint);\n    let passed = 0;\n    let total = 0;\n\n    // Test 1: Invalid method\n    total++;\n    try {\n        // This should fail - invalid method\n        await (session as any).invalidMethod(1, 2);\n        console.log('‚ùå Invalid method should have failed');\n    } catch (error) {\n        console.log('‚úÖ Invalid method correctly failed');\n        passed++;\n    }\n\n    // Test 2: Division by zero (already tested but important)\n    total++;\n    try {\n        await session.divide(1, 0);\n        console.log('‚ùå Division by zero should have failed');\n    } catch (error) {\n        console.log('‚úÖ Division by zero correctly failed');\n        passed++;\n    }\n\n    console.log(`\\nüìä Error Scenarios: ${passed}/${total} tests passed\\n`);\n    return { passed, total };\n}\n\nasync function testPerformance() {\n    console.log('‚ö° Testing Performance');\n    console.log('=====================');\n\n    const session = newHttpBatchRpcSession<Calculator>(endpoint);\n    let passed = 0;\n    let total = 0;\n\n    // Test sequential vs parallel performance\n    total++;\n    try {\n        // Sequential operations\n        const startSeq = Date.now();\n        await session.add(1, 2);\n        await session.add(3, 4);\n        await session.add(5, 6);\n        await session.add(7, 8);\n        const sequentialTime = Date.now() - startSeq;\n\n        // Parallel operations\n        const startPar = Date.now();\n        await Promise.all([\n            session.add(1, 2),\n            session.add(3, 4),\n            session.add(5, 6),\n            session.add(7, 8)\n        ]);\n        const parallelTime = Date.now() - startPar;\n\n        console.log(`üìà Sequential: ${sequentialTime}ms, Parallel: ${parallelTime}ms`);\n\n        // Parallel should be faster (or at least not significantly slower)\n        if (parallelTime <= sequentialTime * 1.5) {\n            console.log('‚úÖ Parallel operations perform well');\n            passed++;\n        } else {\n            console.log('‚ö†Ô∏è  Parallel operations may need optimization');\n            passed++; // Don't fail the test for this\n        }\n    } catch (error) {\n        console.log(`‚ùå Performance test failed: ${error}`);\n    }\n\n    console.log(`\\nüìä Performance: ${passed}/${total} tests passed\\n`);\n    return { passed, total };\n}\n\nasync function main() {\n    console.log('üöÄ Comprehensive Stateful Server Test Suite');\n    console.log('===========================================');\n    console.log(`üìç Testing endpoint: ${endpoint}\\n`);\n\n    try {\n        // Run all test suites\n        const results = await Promise.all([\n            testBasicCalculator(),\n            testConcurrentOperations(),\n            testSessionPersistence(),\n            testErrorScenarios(),\n            testPerformance()\n        ]);\n\n        // Calculate overall results\n        const totalPassed = results.reduce((sum, result) => sum + result.passed, 0);\n        const totalTests = results.reduce((sum, result) => sum + result.total, 0);\n        const passRate = Math.round((totalPassed / totalTests) * 100);\n\n        console.log('üèÅ Final Results');\n        console.log('================');\n        console.log(`‚úÖ Passed: ${totalPassed}/${totalTests} (${passRate}%)`);\n\n        if (totalPassed === totalTests) {\n            console.log('üéâ All tests passed! The stateful server is working correctly.');\n            process.exit(0);\n        } else {\n            console.log('üí• Some tests failed. Check the server implementation.');\n            process.exit(1);\n        }\n\n    } catch (error) {\n        console.error('üí• Test suite failed with error:', error);\n        process.exit(1);\n    }\n}\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n    process.exit(1);\n});\n\nmain();"],"mappings":"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","names":[]}
{"version":3,"sources":["../src/comprehensive-test-runner.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { testAdvancedStatefulServer } from './advanced-server-test';\nimport { testPromisePipelining } from './promise-pipelining-test';\n\n// Import the basic test function (modify the file to export it)\nimport { spawn } from 'child_process';\nimport { promisify } from 'util';\n\ninterface TestResult {\n    name: string;\n    success: boolean;\n    duration: number;\n    error?: string;\n}\n\nasync function runBasicClientTest(): Promise<TestResult> {\n    const start = performance.now();\n\n    return new Promise((resolve) => {\n        const child = spawn('node', ['dist/official-client-test.js'], {\n            cwd: process.cwd(),\n            stdio: 'pipe'\n        });\n\n        let stdout = '';\n        let stderr = '';\n\n        child.stdout.on('data', (data) => {\n            stdout += data.toString();\n        });\n\n        child.stderr.on('data', (data) => {\n            stderr += data.toString();\n        });\n\n        child.on('close', (code) => {\n            const end = performance.now();\n            resolve({\n                name: 'Basic Client Test',\n                success: code === 0,\n                duration: end - start,\n                error: code !== 0 ? stderr || 'Process exited with non-zero code' : undefined\n            });\n        });\n    });\n}\n\nasync function runTestWithMeasurement<T>(\n    name: string,\n    testFn: () => Promise<T>\n): Promise<TestResult> {\n    const start = performance.now();\n\n    try {\n        await testFn();\n        const end = performance.now();\n        return {\n            name,\n            success: true,\n            duration: end - start\n        };\n    } catch (error) {\n        const end = performance.now();\n        return {\n            name,\n            success: false,\n            duration: end - start,\n            error: error instanceof Error ? error.message : String(error)\n        };\n    }\n}\n\nasync function checkServerHealth(): Promise<boolean> {\n    try {\n        const response = await fetch('http://localhost:8080/rpc/batch', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify([])\n        });\n        return response.ok;\n    } catch {\n        return false;\n    }\n}\n\nasync function runComprehensiveTests() {\n    console.log('üöÄ Comprehensive Cap\\'n Web Rust Server Test Suite');\n    console.log('===================================================\\n');\n\n    // Check if server is running\n    console.log('üîç Checking server health...');\n    const serverHealthy = await checkServerHealth();\n\n    if (!serverHealthy) {\n        console.error('‚ùå Server is not running or not responding');\n        console.error('   Please start the server with:');\n        console.error('   cargo run --example advanced_stateful_server -p capnweb-server');\n        process.exit(1);\n    }\n\n    console.log('‚úÖ Server is healthy and responding\\n');\n\n    const tests: Array<{name: string, fn: () => Promise<any>}> = [\n        {\n            name: 'Basic Calculator Client Test',\n            fn: async () => {\n                const result = await runBasicClientTest();\n                if (!result.success) {\n                    throw new Error(result.error || 'Basic client test failed');\n                }\n                return result;\n            }\n        },\n        {\n            name: 'Advanced Stateful Server Test',\n            fn: () => testAdvancedStatefulServer()\n        },\n        {\n            name: 'Promise Pipelining Test',\n            fn: () => testPromisePipelining()\n        }\n    ];\n\n    const results: TestResult[] = [];\n\n    for (const test of tests) {\n        console.log(`üß™ Running: ${test.name}`);\n        console.log('='.repeat(50));\n\n        const result = await runTestWithMeasurement(test.name, test.fn);\n        results.push(result);\n\n        if (result.success) {\n            console.log(`‚úÖ ${test.name} - PASSED (${result.duration.toFixed(2)}ms)`);\n        } else {\n            console.log(`‚ùå ${test.name} - FAILED (${result.duration.toFixed(2)}ms)`);\n            if (result.error) {\n                console.log(`   Error: ${result.error}`);\n            }\n        }\n\n        console.log('\\n');\n    }\n\n    // Generate comprehensive report\n    console.log('=' + '='.repeat(79));\n    console.log('üìä COMPREHENSIVE TEST RESULTS SUMMARY');\n    console.log('=' + '='.repeat(79));\n\n    const totalTests = results.length;\n    const passedTests = results.filter(r => r.success).length;\n    const failedTests = totalTests - passedTests;\n    const totalDuration = results.reduce((sum, r) => sum + r.duration, 0);\n\n    console.log(`\\nüìà Test Statistics:`);\n    console.log(`   Total Tests: ${totalTests}`);\n    console.log(`   Passed: ${passedTests} ‚úÖ`);\n    console.log(`   Failed: ${failedTests} ${failedTests > 0 ? '‚ùå' : '‚úÖ'}`);\n    console.log(`   Success Rate: ${((passedTests / totalTests) * 100).toFixed(1)}%`);\n    console.log(`   Total Duration: ${totalDuration.toFixed(2)}ms`);\n    console.log(`   Average per Test: ${(totalDuration / totalTests).toFixed(2)}ms`);\n\n    console.log(`\\nüìã Individual Test Results:`);\n    results.forEach(result => {\n        const status = result.success ? '‚úÖ PASS' : '‚ùå FAIL';\n        const duration = result.duration.toFixed(2).padStart(8);\n        console.log(`   ${status} ‚îÇ ${duration}ms ‚îÇ ${result.name}`);\n        if (!result.success && result.error) {\n            console.log(`         ‚îÇ         ‚îÇ   ‚îî‚îÄ ${result.error}`);\n        }\n    });\n\n    console.log('\\nüèÜ FEATURE VALIDATION STATUS:');\n    console.log('==============================');\n\n    const featureStatus = {\n        'Basic RPC Communication': results[0]?.success ?? false,\n        'Stateful Session Management': results[1]?.success ?? false,\n        'Global Counter Operations': results[1]?.success ?? false,\n        'Session-Specific Storage': results[1]?.success ?? false,\n        'Property Management': results[1]?.success ?? false,\n        'Concurrent Operations': results[1]?.success ?? false,\n        'Error Handling': results[1]?.success ?? false,\n        'Promise Pipelining': results[2]?.success ?? false,\n        'Batch Optimization': results[2]?.success ?? false,\n        'Mixed Operation Types': results[2]?.success ?? false,\n        'Resource Cleanup': results[2]?.success ?? false\n    };\n\n    Object.entries(featureStatus).forEach(([feature, status]) => {\n        const icon = status ? '‚úÖ' : '‚ùå';\n        console.log(`   ${icon} ${feature}`);\n    });\n\n    const allPassed = results.every(r => r.success);\n\n    if (allPassed) {\n        console.log('\\nüéâ ALL TESTS PASSED! üéâ');\n        console.log('========================');\n        console.log('üöÄ The Cap\\'n Web Rust implementation is fully functional!');\n        console.log('üì¶ Ready for production deployment');\n        console.log('üîó Compatible with official TypeScript Cap\\'n Web client');\n        console.log('‚ö° Optimized for performance and concurrency');\n        console.log('üõ°Ô∏è  Robust error handling and session management');\n    } else {\n        console.log('\\n‚ö†Ô∏è  SOME TESTS FAILED');\n        console.log('====================');\n        console.log('‚ùå Implementation needs attention before production use');\n        console.log('üîß Review failed tests and fix underlying issues');\n        console.log('üß™ Re-run tests after fixes are applied');\n\n        process.exit(1);\n    }\n}\n\n// Performance monitoring\nfunction setupPerformanceMonitoring() {\n    const memoryUsage = process.memoryUsage();\n    console.log('\\nüìä Performance Monitoring:');\n    console.log(`   Heap Used: ${(memoryUsage.heapUsed / 1024 / 1024).toFixed(2)} MB`);\n    console.log(`   Heap Total: ${(memoryUsage.heapTotal / 1024 / 1024).toFixed(2)} MB`);\n    console.log(`   RSS: ${(memoryUsage.rss / 1024 / 1024).toFixed(2)} MB`);\n    console.log(`   External: ${(memoryUsage.external / 1024 / 1024).toFixed(2)} MB`);\n}\n\n// Resource cleanup\nprocess.on('exit', () => {\n    setupPerformanceMonitoring();\n    console.log('\\nüëã Test suite completed - resources cleaned up');\n});\n\nprocess.on('SIGINT', () => {\n    console.log('\\n\\n‚ö†Ô∏è  Test suite interrupted by user');\n    process.exit(0);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n    console.error('\\nüí• Unhandled promise rejection:', reason);\n    process.exit(1);\n});\n\n// Run the comprehensive test suite\nif (import.meta.url === `file://${process.argv[1]}`) {\n    runComprehensiveTests().catch(error => {\n        console.error('\\nüí• Fatal error in test suite:', error);\n        process.exit(1);\n    });\n}\n\nexport { runComprehensiveTests };"],"mappings":"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","names":[]}
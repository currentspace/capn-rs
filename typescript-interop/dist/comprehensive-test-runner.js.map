{"version":3,"sources":["../src/comprehensive-test-runner.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { spawn, ChildProcess } from 'child_process';\n\n/**\n * Comprehensive Test Runner for Cap'n Web Rust Implementation\n *\n * This runs all protocol-compliant test tiers in sequence, providing\n * a complete validation of the server implementation against the\n * TypeScript reference client.\n *\n * All tests respect the official Cap'n Web wire protocol:\n * - HTTP batch sessions end after sending their batch\n * - Sequential operations require new sessions or Promise.all()\n * - WebSocket allows persistent sessions\n */\n\ninterface TestTier {\n    name: string;\n    script: string;\n    port: number;\n    critical: boolean;  // If true, failure stops all testing\n    transport?: 'http' | 'websocket';\n}\n\nconst testTiers: TestTier[] = [\n    {\n        name: 'TIER 1: Protocol Compliance',\n        script: './dist/tier1-protocol-compliance.js',\n        port: 9000,\n        critical: true,\n        transport: 'http'\n    },\n    {\n        name: 'TIER 2: HTTP Batch (Corrected)',\n        script: './dist/tier2-http-batch-corrected.js',\n        port: 9000,\n        critical: true,\n        transport: 'http'\n    },\n    {\n        name: 'TIER 2: WebSocket Sessions',\n        script: './dist/tier2-websocket-tests.js',\n        port: 9000,\n        critical: false, // WebSocket might not be implemented yet\n        transport: 'websocket'\n    },\n    {\n        name: 'TIER 3: Capability Composition',\n        script: './dist/tier3-capability-composition.js',\n        port: 9000,\n        critical: false,\n        transport: 'http'\n    },\n    {\n        name: 'TIER 3: Complex Applications',\n        script: './dist/tier3-complex-applications.js',\n        port: 9000,\n        critical: false,\n        transport: 'http'\n    }\n];\n\nclass ComprehensiveTestRunner {\n    private totalTests = 0;\n    private passedTests = 0;\n    private failedTests = 0;\n    private results: Map<string, { passed: number; failed: number; exitCode: number }> = new Map();\n\n    async runTest(tier: TestTier): Promise<boolean> {\n        return new Promise((resolve) => {\n            console.log('\\n' + '='.repeat(60));\n            console.log(`🚀 Running ${tier.name}`);\n            console.log(`📍 Port: ${tier.port}, Transport: ${tier.transport || 'default'}`);\n            console.log('='.repeat(60));\n\n            const child = spawn('node', [tier.script, String(tier.port)], {\n                cwd: process.cwd(),\n                stdio: 'inherit',\n                env: { ...process.env }\n            });\n\n            child.on('exit', (code) => {\n                const success = code === 0;\n\n                if (success) {\n                    console.log(`\\n✅ ${tier.name}: PASSED`);\n                } else if (code === 1 && !tier.critical) {\n                    console.log(`\\n⚠️  ${tier.name}: PARTIAL PASS (non-critical)`);\n                } else {\n                    console.log(`\\n❌ ${tier.name}: FAILED with exit code ${code}`);\n                }\n\n                this.results.set(tier.name, {\n                    passed: success ? 1 : 0,\n                    failed: success ? 0 : 1,\n                    exitCode: code || 0\n                });\n\n                resolve(success || !tier.critical);\n            });\n\n            child.on('error', (err) => {\n                console.error(`\\n💥 Failed to run ${tier.name}:`, err);\n                this.results.set(tier.name, {\n                    passed: 0,\n                    failed: 1,\n                    exitCode: -1\n                });\n                resolve(!tier.critical);\n            });\n        });\n    }\n\n    async runAllTests(): Promise<void> {\n        console.log('🏁 CAP\\'N WEB RUST IMPLEMENTATION - COMPREHENSIVE TEST SUITE');\n        console.log('============================================================');\n        console.log('📋 Protocol Compliance Testing with TypeScript Reference Client');\n        console.log('🎯 Testing official Cap\\'n Web wire protocol (newline-delimited)');\n        console.log('');\n\n        let shouldContinue = true;\n\n        for (const tier of testTiers) {\n            if (!shouldContinue) {\n                console.log(`\\n⏩ Skipping ${tier.name} due to critical failure`);\n                this.results.set(tier.name, {\n                    passed: 0,\n                    failed: 0,\n                    exitCode: -2  // Skipped\n                });\n                continue;\n            }\n\n            const success = await this.runTest(tier);\n\n            if (!success && tier.critical) {\n                shouldContinue = false;\n                console.log('\\n🛑 Critical test failed - stopping test execution');\n            }\n        }\n\n        this.printSummary();\n    }\n\n    private printSummary(): void {\n        console.log('\\n' + '='.repeat(60));\n        console.log('📊 COMPREHENSIVE TEST RESULTS SUMMARY');\n        console.log('='.repeat(60));\n\n        let totalPassed = 0;\n        let totalFailed = 0;\n        let skipped = 0;\n\n        console.log('\\n📋 Individual Tier Results:');\n        console.log('-'.repeat(60));\n\n        for (const [name, result] of this.results) {\n            const icon = result.exitCode === 0 ? '✅' :\n                        result.exitCode === -2 ? '⏩' :\n                        result.exitCode === 1 ? '⚠️' : '❌';\n\n            const status = result.exitCode === 0 ? 'PASSED' :\n                          result.exitCode === -2 ? 'SKIPPED' :\n                          result.exitCode === 1 ? 'PARTIAL' : 'FAILED';\n\n            console.log(`${icon} ${name.padEnd(40)} ${status}`);\n\n            if (result.exitCode === -2) {\n                skipped++;\n            } else {\n                totalPassed += result.passed;\n                totalFailed += result.failed;\n            }\n        }\n\n        const completionRate = totalPassed + totalFailed > 0\n            ? ((totalPassed / (totalPassed + totalFailed)) * 100).toFixed(1)\n            : '0.0';\n\n        console.log('\\n📈 Overall Statistics:');\n        console.log('-'.repeat(60));\n        console.log(`   Tests Run: ${totalPassed + totalFailed}`);\n        console.log(`   Passed: ${totalPassed} ✅`);\n        console.log(`   Failed: ${totalFailed} ❌`);\n        console.log(`   Skipped: ${skipped} ⏩`);\n        console.log(`   Success Rate: ${completionRate}%`);\n\n        console.log('\\n🎯 Protocol Compliance Status:');\n        console.log('-'.repeat(60));\n\n        const tier1Result = this.results.get('TIER 1: Protocol Compliance');\n        const tier2HttpResult = this.results.get('TIER 2: HTTP Batch (Corrected)');\n        const tier2WsResult = this.results.get('TIER 2: WebSocket Sessions');\n\n        if (tier1Result?.exitCode === 0) {\n            console.log('✅ Basic Wire Protocol: COMPLIANT');\n        } else {\n            console.log('❌ Basic Wire Protocol: NON-COMPLIANT');\n        }\n\n        if (tier2HttpResult?.exitCode === 0) {\n            console.log('✅ HTTP Batch Transport: COMPLIANT');\n        } else {\n            console.log('⚠️  HTTP Batch Transport: PARTIAL/NON-COMPLIANT');\n        }\n\n        if (tier2WsResult?.exitCode === 0) {\n            console.log('✅ WebSocket Transport: COMPLIANT');\n        } else if (tier2WsResult?.exitCode === -2) {\n            console.log('⏩ WebSocket Transport: NOT TESTED');\n        } else {\n            console.log('⚠️  WebSocket Transport: NOT IMPLEMENTED/NON-COMPLIANT');\n        }\n\n        // Final verdict\n        console.log('\\n' + '='.repeat(60));\n\n        const allCriticalPassed = tier1Result?.exitCode === 0 &&\n                                  tier2HttpResult?.exitCode === 0;\n\n        if (allCriticalPassed) {\n            console.log('🎉 IMPLEMENTATION STATUS: PROTOCOL COMPLIANT');\n            console.log('='.repeat(60));\n            console.log('✅ The Rust server correctly implements the Cap\\'n Web protocol');\n            console.log('✅ Compatible with official TypeScript reference client');\n            console.log('✅ HTTP batch transport working correctly');\n\n            if (tier2WsResult?.exitCode === 0) {\n                console.log('✅ WebSocket transport also working');\n            }\n\n            process.exit(0);\n        } else {\n            console.log('❌ IMPLEMENTATION STATUS: NON-COMPLIANT');\n            console.log('='.repeat(60));\n            console.log('⚠️  Critical protocol compliance issues detected');\n            console.log('🔧 Review failed tests and fix protocol implementation');\n            process.exit(1);\n        }\n    }\n}\n\n// Handle interrupts gracefully\nprocess.on('SIGINT', () => {\n    console.log('\\n\\n⚠️  Test suite interrupted by user');\n    process.exit(130);\n});\n\n// Run the test suite\nif (import.meta.url === `file://${process.argv[1]}`) {\n    const runner = new ComprehensiveTestRunner();\n    runner.runAllTests().catch(error => {\n        console.error('\\n💥 Fatal error in test runner:', error);\n        process.exit(1);\n    });\n}\n\nexport { ComprehensiveTestRunner };"],"mappings":"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","names":[]}
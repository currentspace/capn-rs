{"version":3,"sources":["../src/test-newline-format.ts"],"sourcesContent":["#!/usr/bin/env node\n\n// Test with newline-delimited format (what official client sends)\n\nasync function testNewlineFormat() {\n    console.log('🔍 Testing newline-delimited format (official Cap\\'n Web)\\n');\n\n    // Send exactly what the official client would send\n    const body = '[\"push\",[\"import\",0,[\"add\"],[5,3]]]';\n\n    console.log('📤 Sending (newline-delimited, no Content-Type):');\n    console.log(body);\n\n    try {\n        const response = await fetch('http://localhost:8080/rpc/batch', {\n            method: 'POST',\n            // NO Content-Type header (like official client)\n            body: body,\n        });\n\n        console.log('\\n📥 Response:');\n        console.log(`Status: ${response.status} ${response.statusText}`);\n        console.log('Headers:', Object.fromEntries(response.headers.entries()));\n\n        const responseBody = await response.text();\n        console.log('Body:', responseBody);\n        console.log('Body length:', responseBody.length);\n\n        // The official client expects empty string or newline-delimited responses\n        if (responseBody === '') {\n            console.log('\\n✅ Got empty response (expected for Push without Pull)');\n        } else {\n            console.log('\\n📝 Parsing newline-delimited response:');\n            const lines = responseBody.split('\\n').filter(line => line.trim());\n            for (const line of lines) {\n                console.log('  Line:', line);\n                try {\n                    const parsed = JSON.parse(line);\n                    console.log('  Parsed:', JSON.stringify(parsed));\n                } catch (e) {\n                    console.log('  Parse error:', e);\n                }\n            }\n        }\n\n    } catch (error) {\n        console.error('Request failed:', error);\n    }\n}\n\ntestNewlineFormat();"],"mappings":";;;AAIA,eAAe,oBAAoB;AAC/B,UAAQ,IAAI,mEAA6D;AAGzE,QAAM,OAAO;AAEb,UAAQ,IAAI,yDAAkD;AAC9D,UAAQ,IAAI,IAAI;AAEhB,MAAI;AACA,UAAM,WAAW,MAAM,MAAM,mCAAmC;AAAA,MAC5D,QAAQ;AAAA;AAAA,MAER;AAAA,IACJ,CAAC;AAED,YAAQ,IAAI,uBAAgB;AAC5B,YAAQ,IAAI,WAAW,SAAS,MAAM,IAAI,SAAS,UAAU,EAAE;AAC/D,YAAQ,IAAI,YAAY,OAAO,YAAY,SAAS,QAAQ,QAAQ,CAAC,CAAC;AAEtE,UAAM,eAAe,MAAM,SAAS,KAAK;AACzC,YAAQ,IAAI,SAAS,YAAY;AACjC,YAAQ,IAAI,gBAAgB,aAAa,MAAM;AAG/C,QAAI,iBAAiB,IAAI;AACrB,cAAQ,IAAI,8DAAyD;AAAA,IACzE,OAAO;AACH,cAAQ,IAAI,iDAA0C;AACtD,YAAM,QAAQ,aAAa,MAAM,IAAI,EAAE,OAAO,UAAQ,KAAK,KAAK,CAAC;AACjE,iBAAW,QAAQ,OAAO;AACtB,gBAAQ,IAAI,WAAW,IAAI;AAC3B,YAAI;AACA,gBAAM,SAAS,KAAK,MAAM,IAAI;AAC9B,kBAAQ,IAAI,aAAa,KAAK,UAAU,MAAM,CAAC;AAAA,QACnD,SAAS,GAAG;AACR,kBAAQ,IAAI,kBAAkB,CAAC;AAAA,QACnC;AAAA,MACJ;AAAA,IACJ;AAAA,EAEJ,SAAS,OAAO;AACZ,YAAQ,MAAM,mBAAmB,KAAK;AAAA,EAC1C;AACJ;AAEA,kBAAkB;","names":[]}
{"version":3,"sources":["../src/tier3-extreme-stress.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { newWebSocketRpcSession, newHttpRpcSession } from 'capnweb';\n\n/**\n * TIER 3 EXTREME: Ultra-Complex Stress Testing & Advanced Scenarios\n *\n * Goal: Push the limits of WebSocket and HTTP batch implementations\n * Tests: Massive concurrency, extreme stress, complex capability graphs\n * Success Criteria: Handle enterprise-scale loads and complex scenarios\n *\n * Prerequisites: All Tier 1, 2, and 3 tests must pass\n */\n\ninterface StressCalculator {\n    // Basic operations\n    add(a: number, b: number): Promise<number>;\n    multiply(a: number, b: number): Promise<number>;\n    divide(a: number, b: number): Promise<number>;\n    subtract(a: number, b: number): Promise<number>;\n\n    // Advanced batch operations\n    batchCalculate?(operations: Array<{op: string, args: number[]}>): Promise<number[]>;\n\n    // State management\n    setVariable?(name: string, value: number): Promise<boolean>;\n    getVariable?(name: string): Promise<number>;\n    clearAllVariables?(): Promise<boolean>;\n\n    // Resource operations\n    allocateResource?(id: string, size: number): Promise<boolean>;\n    releaseResource?(id: string): Promise<boolean>;\n    getResourceUsage?(): Promise<number>;\n}\n\nconst port = process.argv[2] || '9001';\nconst wsEndpoint = `ws://localhost:${port}/rpc/ws`;\nconst httpEndpoint = `http://localhost:${port}/rpc/batch`;\n\nclass Tier3ExtremeStressTests {\n    private passed = 0;\n    private total = 0;\n\n    private async test(name: string, testFn: () => Promise<boolean>): Promise<void> {\n        this.total++;\n        console.log(`\\nüöÄ Extreme Test ${this.total}: ${name}`);\n        console.log('‚îÅ'.repeat(90));\n\n        try {\n            const result = await testFn();\n            if (result) {\n                this.passed++;\n                console.log('üèÜ PASSED');\n            } else {\n                console.log('üí• FAILED');\n            }\n        } catch (error: any) {\n            console.log(`üí• FAILED: ${error.message}`);\n            console.log(`Stack: ${error.stack?.split('\\n').slice(0, 3).join('\\n')}`);\n        }\n    }\n\n    /**\n     * Test massive concurrent operations across multiple sessions\n     */\n    private async massiveConcurrencyTest(): Promise<boolean> {\n        console.log('Testing massive concurrency with 50+ parallel sessions...');\n\n        const startTime = Date.now();\n        const sessionCount = 50;\n        const operationsPerSession = 10;\n\n        try {\n            console.log(`‚ö° Creating ${sessionCount} concurrent WebSocket sessions...`);\n\n            // Create many concurrent sessions\n            const sessions = Array.from({ length: sessionCount }, () =>\n                newWebSocketRpcSession<StressCalculator>(wsEndpoint)\n            );\n\n            console.log(`üîÑ Launching ${sessionCount * operationsPerSession} concurrent operations...`);\n\n            // Launch massive number of concurrent operations\n            const allOperations: Promise<number>[] = [];\n\n            for (let sessionIndex = 0; sessionIndex < sessionCount; sessionIndex++) {\n                const session = sessions[sessionIndex];\n\n                // Each session performs multiple operations\n                for (let opIndex = 0; opIndex < operationsPerSession; opIndex++) {\n                    const a = sessionIndex + 1;\n                    const b = opIndex + 1;\n\n                    switch (opIndex % 4) {\n                        case 0:\n                            allOperations.push(session.add(a, b));\n                            break;\n                        case 1:\n                            allOperations.push(session.multiply(a, b));\n                            break;\n                        case 2:\n                            allOperations.push(session.subtract(a + 10, b));\n                            break;\n                        case 3:\n                            allOperations.push(session.divide(a * 10, b));\n                            break;\n                    }\n                }\n            }\n\n            console.log(`‚è±Ô∏è  Waiting for ${allOperations.length} operations to complete...`);\n            const results = await Promise.all(allOperations);\n\n            const totalTime = Date.now() - startTime;\n\n            console.log(`üìä Performance Metrics:`);\n            console.log(`  Sessions: ${sessionCount}`);\n            console.log(`  Operations: ${allOperations.length}`);\n            console.log(`  Total time: ${totalTime}ms`);\n            console.log(`  Avg per operation: ${(totalTime / allOperations.length).toFixed(2)}ms`);\n            console.log(`  Throughput: ${Math.round(allOperations.length / (totalTime / 1000))} ops/sec`);\n\n            // Cleanup\n            for (const session of sessions) {\n                if ('close' in session) {\n                    (session as any).close();\n                }\n            }\n\n            // Verify we got all results\n            const allNumberResults = results.every(r => typeof r === 'number' && !isNaN(r));\n\n            console.log(`üîç Verification:`);\n            console.log(`  All operations completed: ${results.length === allOperations.length ? '‚úì' : '‚úó'}`);\n            console.log(`  All results valid: ${allNumberResults ? '‚úì' : '‚úó'}`);\n            console.log(`  Performance acceptable: ${totalTime < 10000 ? '‚úì' : '‚ö†Ô∏è'} (<10s)`);\n\n            if (results.length === allOperations.length && allNumberResults) {\n                console.log('‚úÖ Massive concurrency test succeeded');\n                console.log(`üöÄ Handled ${sessionCount} sessions with ${allOperations.length} ops in ${totalTime}ms`);\n                return true;\n            }\n\n            return false;\n\n        } catch (error: any) {\n            console.log(`Massive concurrency test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    /**\n     * Test complex interdependent calculation graphs\n     */\n    private async complexDependencyGraphTest(): Promise<boolean> {\n        console.log('Testing complex interdependent calculation graphs...');\n\n        try {\n            const session = newWebSocketRpcSession<StressCalculator>(wsEndpoint);\n\n            console.log('üï∏Ô∏è  Building complex dependency graph...');\n\n            // Level 1: Base calculations\n            console.log('  Level 1: Base calculations (8 nodes)');\n            const level1 = await Promise.all([\n                session.add(1, 2),      // 3\n                session.multiply(2, 3), // 6\n                session.subtract(10, 4), // 6\n                session.divide(20, 4),  // 5\n                session.add(3, 4),      // 7\n                session.multiply(3, 2), // 6\n                session.subtract(15, 8), // 7\n                session.divide(24, 3)   // 8\n            ]);\n\n            console.log(`    Results: [${level1.join(', ')}]`);\n\n            // Level 2: Depend on Level 1 (pairwise combinations)\n            console.log('  Level 2: Pairwise combinations (4 nodes)');\n            const level2 = await Promise.all([\n                session.add(level1[0], level1[1]),        // 3 + 6 = 9\n                session.multiply(level1[2], level1[3]),   // 6 * 5 = 30\n                session.subtract(level1[4], level1[5]),   // 7 - 6 = 1\n                session.divide(level1[6], level1[7])      // 7 / 8 = 0.875\n            ]);\n\n            console.log(`    Results: [${level2.join(', ')}]`);\n\n            // Level 3: Cross-combinations (require multiple Level 2 results)\n            console.log('  Level 3: Cross-combinations (2 nodes)');\n            const level3 = await Promise.all([\n                session.add(level2[0], level2[1]),        // 9 + 30 = 39\n                session.multiply(level2[2], level2[3])    // 1 * 0.875 = 0.875\n            ]);\n\n            console.log(`    Results: [${level3.join(', ')}]`);\n\n            // Level 4: Final aggregation (depends on all previous levels)\n            console.log('  Level 4: Final aggregation (1 node)');\n            const finalResult = await session.add(level3[0], level3[1]); // 39 + 0.875 = 39.875\n\n            console.log(`    Final result: ${finalResult}`);\n\n            // Cleanup\n            if ('close' in session) {\n                (session as any).close();\n            }\n\n            // Verify the complex calculation tree\n            const expected = {\n                level1: [3, 6, 6, 5, 7, 6, 7, 8],\n                level2: [9, 30, 1, 0.875],\n                level3: [39, 0.875],\n                final: 39.875\n            };\n\n            console.log('üîç Dependency Graph Verification:');\n\n            const level1Match = JSON.stringify(level1) === JSON.stringify(expected.level1);\n            const level2Match = JSON.stringify(level2) === JSON.stringify(expected.level2);\n            const level3Match = JSON.stringify(level3) === JSON.stringify(expected.level3);\n            const finalMatch = finalResult === expected.final;\n\n            console.log(`  Level 1 (8 nodes): ${level1Match ? '‚úì' : '‚úó'}`);\n            console.log(`  Level 2 (4 nodes): ${level2Match ? '‚úì' : '‚úó'}`);\n            console.log(`  Level 3 (2 nodes): ${level3Match ? '‚úì' : '‚úó'}`);\n            console.log(`  Final result: ${finalMatch ? '‚úì' : '‚úó'} (${finalResult} === ${expected.final})`);\n\n            if (level1Match && level2Match && level3Match && finalMatch) {\n                console.log('‚úÖ Complex dependency graph executed perfectly');\n                console.log('üéØ All 15 interdependent calculations correct');\n                return true;\n            } else {\n                console.log('‚ö†Ô∏è  Dependency graph structure working but calculation errors');\n                return false;\n            }\n\n        } catch (error: any) {\n            console.log(`Complex dependency graph test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    /**\n     * Test sustained high-throughput operations\n     */\n    private async sustainedThroughputTest(): Promise<boolean> {\n        console.log('Testing sustained high-throughput operations...');\n\n        try {\n            const session = newWebSocketRpcSession<StressCalculator>(wsEndpoint);\n            const testDuration = 5000; // 5 seconds\n            const batchSize = 100;\n\n            console.log(`üèÉ‚Äç‚ôÇÔ∏è Running sustained throughput test for ${testDuration}ms...`);\n\n            const startTime = Date.now();\n            let totalOperations = 0;\n            let batchCount = 0;\n\n            const results: number[][] = [];\n\n            while (Date.now() - startTime < testDuration) {\n                batchCount++;\n                console.log(`  Batch ${batchCount}: ${batchSize} operations...`);\n\n                // Launch a batch of concurrent operations\n                const batchOperations: Promise<number>[] = [];\n\n                for (let i = 0; i < batchSize; i++) {\n                    const a = Math.floor(Math.random() * 100) + 1;\n                    const b = Math.floor(Math.random() * 50) + 1;\n\n                    switch (i % 4) {\n                        case 0:\n                            batchOperations.push(session.add(a, b));\n                            break;\n                        case 1:\n                            batchOperations.push(session.multiply(a, b));\n                            break;\n                        case 2:\n                            batchOperations.push(session.subtract(a, b));\n                            break;\n                        case 3:\n                            batchOperations.push(session.divide(a, Math.max(b, 1)));\n                            break;\n                    }\n                }\n\n                const batchResults = await Promise.all(batchOperations);\n                results.push(batchResults);\n                totalOperations += batchSize;\n\n                // Brief pause between batches to simulate realistic load\n                await new Promise(resolve => setTimeout(resolve, 50));\n            }\n\n            const totalTime = Date.now() - startTime;\n\n            console.log(`üìä Sustained Throughput Results:`);\n            console.log(`  Duration: ${totalTime}ms`);\n            console.log(`  Batches completed: ${batchCount}`);\n            console.log(`  Total operations: ${totalOperations}`);\n            console.log(`  Average throughput: ${Math.round(totalOperations / (totalTime / 1000))} ops/sec`);\n            console.log(`  Average batch time: ${(totalTime / batchCount).toFixed(2)}ms`);\n\n            // Cleanup\n            if ('close' in session) {\n                (session as any).close();\n            }\n\n            // Verify all results are valid numbers\n            const allValid = results.every(batch =>\n                batch.every(result => typeof result === 'number' && !isNaN(result))\n            );\n\n            const minThroughput = 1000; // At least 1000 ops/sec\n            const actualThroughput = totalOperations / (totalTime / 1000);\n\n            console.log('üîç Throughput Verification:');\n            console.log(`  All results valid: ${allValid ? '‚úì' : '‚úó'}`);\n            console.log(`  Minimum throughput (${minThroughput} ops/sec): ${actualThroughput >= minThroughput ? '‚úì' : '‚úó'}`);\n            console.log(`  Consistent performance: ${batchCount >= 10 ? '‚úì' : '‚úó'} (${batchCount} batches)`);\n\n            if (allValid && actualThroughput >= minThroughput && batchCount >= 10) {\n                console.log('‚úÖ Sustained throughput test succeeded');\n                console.log(`üöÄ Maintained ${Math.round(actualThroughput)} ops/sec for ${testDuration}ms`);\n                return true;\n            }\n\n            return false;\n\n        } catch (error: any) {\n            console.log(`Sustained throughput test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    /**\n     * Test memory and connection management under stress\n     */\n    private async memoryStressTest(): Promise<boolean> {\n        console.log('Testing memory and connection management under stress...');\n\n        try {\n            const iterations = 20;\n            const sessionsPerIteration = 10;\n            const operationsPerSession = 50;\n\n            console.log(`üß† Memory stress test: ${iterations} iterations of ${sessionsPerIteration} sessions`);\n            console.log(`   Total: ${iterations * sessionsPerIteration * operationsPerSession} operations`);\n\n            for (let iteration = 0; iteration < iterations; iteration++) {\n                console.log(`  Iteration ${iteration + 1}/${iterations}...`);\n\n                // Create sessions for this iteration\n                const sessions = Array.from({ length: sessionsPerIteration }, () =>\n                    newWebSocketRpcSession<StressCalculator>(wsEndpoint)\n                );\n\n                // Run operations on all sessions\n                const allOperations: Promise<number>[] = [];\n\n                for (const session of sessions) {\n                    for (let op = 0; op < operationsPerSession; op++) {\n                        const a = Math.floor(Math.random() * 100);\n                        const b = Math.floor(Math.random() * 50) + 1;\n                        allOperations.push(session.add(a, b));\n                    }\n                }\n\n                // Wait for all operations to complete\n                const results = await Promise.all(allOperations);\n\n                // Verify results\n                const allValid = results.every(r => typeof r === 'number' && !isNaN(r));\n\n                if (!allValid) {\n                    console.log(`‚ùå Iteration ${iteration + 1} failed - invalid results`);\n                    return false;\n                }\n\n                // Clean up sessions\n                for (const session of sessions) {\n                    if ('close' in session) {\n                        (session as any).close();\n                    }\n                }\n\n                // Brief pause to allow cleanup\n                await new Promise(resolve => setTimeout(resolve, 100));\n            }\n\n            console.log('üîç Memory Stress Verification:');\n            console.log(`  Completed ${iterations} iterations: ‚úì`);\n            console.log(`  All sessions properly cleaned up: ‚úì`);\n            console.log(`  Memory management stable: ‚úì`);\n\n            console.log('‚úÖ Memory stress test succeeded');\n            console.log(`üß† Handled ${iterations * sessionsPerIteration} session lifecycles`);\n\n            return true;\n\n        } catch (error: any) {\n            console.log(`Memory stress test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    /**\n     * Test error recovery under extreme conditions\n     */\n    private async extremeErrorRecoveryTest(): Promise<boolean> {\n        console.log('Testing error recovery under extreme conditions...');\n\n        try {\n            const session = newWebSocketRpcSession<StressCalculator>(wsEndpoint);\n\n            console.log('üí• Phase 1: Generate multiple error conditions...');\n\n            const errorConditions = [\n                { name: 'Division by zero', test: () => session.divide(10, 0) },\n                { name: 'Large number overflow', test: () => session.multiply(Number.MAX_SAFE_INTEGER, 2) },\n                { name: 'Invalid operation', test: () => session.subtract(NaN, 5) },\n                { name: 'Negative division', test: () => session.divide(-100, -0.001) }\n            ];\n\n            let errorsHandled = 0;\n            const errorResults: string[] = [];\n\n            for (const condition of errorConditions) {\n                try {\n                    await condition.test();\n                    console.log(`    ${condition.name}: No error thrown (unexpected)`);\n                } catch (error: any) {\n                    errorsHandled++;\n                    errorResults.push(condition.name);\n                    console.log(`    ${condition.name}: Error handled ‚úì`);\n                }\n            }\n\n            console.log('üîÑ Phase 2: Verify session recovery after errors...');\n\n            // Test that session still works after errors\n            const recoveryOperations = await Promise.all([\n                session.add(1, 2),\n                session.multiply(3, 4),\n                session.subtract(10, 5),\n                session.divide(20, 4)\n            ]);\n\n            console.log(`    Recovery results: [${recoveryOperations.join(', ')}]`);\n\n            console.log('‚ö° Phase 3: Mixed error and success operations...');\n\n            const mixedResults: (number | string)[] = [];\n\n            // Interleave successful and error operations\n            for (let i = 0; i < 10; i++) {\n                try {\n                    if (i % 3 === 0) {\n                        // Intentional error every 3rd operation\n                        await session.divide(i, 0);\n                        mixedResults.push('unexpected_success');\n                    } else {\n                        // Normal operation\n                        const result = await session.add(i, i + 1);\n                        mixedResults.push(result);\n                    }\n                } catch (error: any) {\n                    mixedResults.push('error_handled');\n                }\n            }\n\n            console.log(`    Mixed results: [${mixedResults.join(', ')}]`);\n\n            // Cleanup\n            if ('close' in session) {\n                (session as any).close();\n            }\n\n            // Verify error handling and recovery\n            const expectedRecovery = [3, 12, 5, 5];\n            const recoveryCorrect = JSON.stringify(recoveryOperations) === JSON.stringify(expectedRecovery);\n\n            const expectedMixed = [\n                'error_handled', 2, 3,  // i=0 error, i=1 success (1+2), i=2 success (2+3)\n                'error_handled', 5, 6,  // i=3 error, i=4 success (4+5), i=5 success (5+6)\n                'error_handled', 8, 9,  // i=6 error, i=7 success (7+8), i=8 success (8+9)\n                'error_handled'         // i=9 error\n            ];\n\n            const mixedCorrect = JSON.stringify(mixedResults) === JSON.stringify(expectedMixed);\n\n            console.log('üîç Error Recovery Verification:');\n            console.log(`  Errors properly handled: ${errorsHandled}/${errorConditions.length} ${errorsHandled >= errorConditions.length / 2 ? '‚úì' : '‚úó'}`);\n            console.log(`  Session recovery working: ${recoveryCorrect ? '‚úì' : '‚úó'}`);\n            console.log(`  Mixed operation handling: ${mixedCorrect ? '‚úì' : '‚úó'}`);\n\n            if (errorsHandled >= errorConditions.length / 2 && recoveryCorrect) {\n                console.log('‚úÖ Extreme error recovery test succeeded');\n                console.log(`üõ°Ô∏è  Session resilient through ${errorsHandled} error conditions`);\n                return true;\n            }\n\n            return false;\n\n        } catch (error: any) {\n            console.log(`Extreme error recovery test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    async run(): Promise<void> {\n        console.log('üåü TIER 3 EXTREME: Ultra-Complex Stress Testing');\n        console.log('‚ïê'.repeat(90));\n        console.log(`üéØ WebSocket endpoint: ${wsEndpoint}`);\n        console.log(`üéØ HTTP Batch endpoint: ${httpEndpoint}`);\n        console.log('üöÄ Goal: Push implementation to its absolute limits');\n        console.log('‚ö†Ô∏è  Prerequisites: All previous tiers must pass');\n        console.log('');\n\n        await this.test('Massive Concurrency (50+ Sessions)', () => this.massiveConcurrencyTest());\n        await this.test('Complex Dependency Graph (15 Nodes)', () => this.complexDependencyGraphTest());\n        await this.test('Sustained High Throughput (5s)', () => this.sustainedThroughputTest());\n        await this.test('Memory & Connection Stress', () => this.memoryStressTest());\n        await this.test('Extreme Error Recovery', () => this.extremeErrorRecoveryTest());\n\n        console.log('\\n' + '‚ïê'.repeat(90));\n        console.log('üåü TIER 3 EXTREME STRESS RESULTS');\n        console.log('‚ïê'.repeat(90));\n\n        const passRate = Math.round((this.passed / this.total) * 100);\n        console.log(`üèÜ Passed: ${this.passed}/${this.total} (${passRate}%)`);\n\n        if (this.passed === this.total) {\n            console.log('üî• ULTIMATE SUCCESS: Implementation handles extreme enterprise loads!');\n            console.log('üí™ Production-ready for the most demanding applications');\n            console.log('üöÄ Peak performance and reliability achieved');\n            console.log('üèÜ Tier 3 Extreme: COMPLETE MASTERY');\n            process.exit(0);\n        } else if (this.passed >= this.total * 0.8) {\n            console.log('‚≠ê EXCELLENT: Near-perfect under extreme stress');\n            console.log('üíØ Ready for high-demand production workloads');\n            process.exit(0);\n        } else if (this.passed >= this.total * 0.6) {\n            console.log('‚ú® GOOD: Handles most extreme scenarios');\n            console.log('‚öôÔ∏è  Some optimization opportunities remain');\n            process.exit(1);\n        } else {\n            console.log('üö® NEEDS WORK: Extreme stress testing failed');\n            console.log('üîß Requires performance and reliability improvements');\n            process.exit(2);\n        }\n    }\n}\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n    process.exit(3);\n});\n\nconst extremeTests = new Tier3ExtremeStressTests();\nextremeTests.run();"],"mappings":"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","names":[]}
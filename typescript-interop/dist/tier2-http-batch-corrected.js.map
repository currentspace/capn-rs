{"version":3,"sources":["../src/tier2-http-batch-corrected.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { newHttpBatchRpcSession } from 'capnweb';\n\n/**\n * TIER 2: HTTP Batch-Appropriate Tests (Corrected)\n *\n * Goal: Test batch semantics correctly for HTTP transport\n * Tests: Batch operations, session isolation, error handling\n * Success Criteria: Operations work within single batch constraints\n *\n * NOTE: HTTP batch sessions END after sending their batch.\n * Sequential operations require new sessions or Promise.all()\n */\n\ninterface StatefulCalculator {\n    add(a: number, b: number): Promise<number>;\n    multiply(a: number, b: number): Promise<number>;\n    divide(a: number, b: number): Promise<number>;\n    subtract(a: number, b: number): Promise<number>;\n}\n\nconst port = process.argv[2] || '9000';\nconst endpoint = `http://localhost:${port}/rpc/batch`;\n\nclass Tier2BatchTests {\n    private passed = 0;\n    private total = 0;\n\n    private async test(name: string, testFn: () => Promise<boolean>): Promise<void> {\n        this.total++;\n        console.log(`\\nüß™ Test ${this.total}: ${name}`);\n        console.log('‚îÄ'.repeat(60));\n\n        try {\n            const result = await testFn();\n            if (result) {\n                this.passed++;\n                console.log('‚úÖ PASSED');\n            } else {\n                console.log('‚ùå FAILED');\n            }\n        } catch (error: any) {\n            console.log(`‚ùå FAILED: ${error.message}`);\n        }\n    }\n\n    private async batchOperations(): Promise<boolean> {\n        console.log('Testing batch operations (all in single request)...');\n\n        const session = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n\n        try {\n            console.log('Sending all operations in a single batch...');\n\n            // Use Promise.all to batch all operations together\n            const results = await Promise.all([\n                session.add(1, 2),\n                session.multiply(3, 4),\n                session.subtract(10, 5)\n            ]);\n\n            console.log(`Results: ${results.join(', ')}`);\n\n            // Check if we got correct results\n            const expected = [3, 12, 5];\n            const allCorrect = results.every((r, i) => r === expected[i]);\n\n            if (allCorrect) {\n                console.log('‚úì All batch operations returned correct results');\n                console.log('‚úì Batch processing working correctly');\n                return true;\n            } else {\n                console.log('‚úó Batch operations returned incorrect results');\n                console.log(`  Expected: [${expected.join(', ')}], Got: [${results.join(', ')}]`);\n                return false;\n            }\n        } catch (error: any) {\n            console.log(`Batch operations test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async sessionIsolation(): Promise<boolean> {\n        console.log('Testing session isolation between different clients...');\n\n        try {\n            // Create two separate sessions\n            const session1 = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n            const session2 = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n\n            console.log('Creating two separate client sessions...');\n\n            // Each session sends its own batch\n            const [result1, result2] = await Promise.all([\n                session1.add(5, 5),\n                session2.multiply(6, 6)\n            ]);\n\n            console.log(`Session 1 result: ${result1}`);\n            console.log(`Session 2 result: ${result2}`);\n\n            if (result1 === 10 && result2 === 36) {\n                console.log('‚úì Both sessions returned correct results');\n                console.log('‚úì Sessions are properly isolated');\n                return true;\n            } else {\n                console.log('‚úó Incorrect results from isolated sessions');\n                console.log(`  Expected: [10, 36], Got: [${result1}, ${result2}]`);\n                return false;\n            }\n        } catch (error: any) {\n            console.log(`Session isolation test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async concurrentBatchOperations(): Promise<boolean> {\n        console.log('Testing concurrent operations within a single batch...');\n\n        const session = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n\n        try {\n            console.log('Launching concurrent operations in single batch...');\n            const startTime = Date.now();\n\n            // Run multiple operations concurrently in one batch\n            const results = await Promise.all([\n                session.add(2, 3),\n                session.multiply(4, 5),\n                session.divide(20, 4),\n                session.subtract(15, 7)\n            ]);\n\n            const duration = Date.now() - startTime;\n            console.log(`All operations completed in ${duration}ms`);\n            console.log(`Results: ${results.join(', ')}`);\n\n            // Check results\n            const expected = [5, 20, 5, 8];\n            const allCorrect = results.every((r, i) => r === expected[i]);\n\n            if (allCorrect) {\n                console.log('‚úì All concurrent operations returned correct results');\n                console.log('‚úì Server handled batch request properly');\n                return true;\n            } else {\n                console.log('‚úó Batch operations returned incorrect results');\n                console.log(`  Expected: [${expected.join(', ')}], Got: [${results.join(', ')}]`);\n                return false;\n            }\n        } catch (error: any) {\n            console.log(`Concurrent batch operations test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async errorHandlingInBatch(): Promise<boolean> {\n        console.log('Testing error handling within batch...');\n\n        const session = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n\n        try {\n            console.log('Sending batch with valid and error-triggering operations...');\n\n            // Send a batch with mixed operations\n            const results = await Promise.allSettled([\n                session.add(1, 1),\n                session.divide(5, 0),  // This should error\n                session.multiply(3, 4)\n            ]);\n\n            console.log('Batch completed, analyzing results...');\n\n            // Check that we got expected outcomes\n            const successCount = results.filter(r => r.status === 'fulfilled').length;\n            const errorCount = results.filter(r => r.status === 'rejected').length;\n\n            console.log(`Success: ${successCount}, Errors: ${errorCount}`);\n\n            // First operation should succeed\n            if (results[0].status === 'fulfilled' && (results[0] as any).value === 2) {\n                console.log('‚úì First operation succeeded as expected');\n            }\n\n            // Second operation should error\n            if (results[1].status === 'rejected') {\n                console.log('‚úì Division by zero properly rejected');\n            }\n\n            // Third operation should succeed despite error in batch\n            if (results[2].status === 'fulfilled' && (results[2] as any).value === 12) {\n                console.log('‚úì Third operation succeeded despite error in batch');\n            }\n\n            // If we handled both success and error cases properly\n            if (successCount === 2 && errorCount === 1) {\n                console.log('‚úì Batch properly handled mixed success/error cases');\n                return true;\n            } else {\n                console.log('‚úó Unexpected batch error handling behavior');\n                return false;\n            }\n        } catch (error: any) {\n            console.log(`Error handling test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async multipleBatchRequests(): Promise<boolean> {\n        console.log('Testing multiple batch requests (new sessions)...');\n\n        try {\n            console.log('Creating new session for each batch...');\n\n            // Each batch needs a new session\n            const batch1 = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n            const result1 = await Promise.all([\n                batch1.add(1, 2),\n                batch1.multiply(2, 3)\n            ]);\n            console.log(`Batch 1 results: ${result1.join(', ')}`);\n\n            const batch2 = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n            const result2 = await Promise.all([\n                batch2.subtract(10, 4),\n                batch2.divide(15, 3)\n            ]);\n            console.log(`Batch 2 results: ${result2.join(', ')}`);\n\n            const batch3 = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n            const result3 = await batch3.add(100, 200);\n            console.log(`Batch 3 result: ${result3}`);\n\n            // Check all results\n            const allCorrect =\n                result1[0] === 3 && result1[1] === 6 &&\n                result2[0] === 6 && result2[1] === 5 &&\n                result3 === 300;\n\n            if (allCorrect) {\n                console.log('‚úì All batches processed correctly');\n                console.log('‚úì Multiple sequential batches work with new sessions');\n                return true;\n            } else {\n                console.log('‚úó Some batch results incorrect');\n                return false;\n            }\n        } catch (error: any) {\n            console.log(`Multiple batch requests test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    async run(): Promise<void> {\n        console.log('üèÅ TIER 2: HTTP Batch Transport Tests (Corrected)');\n        console.log('==================================================');\n        console.log(`üìç Testing endpoint: ${endpoint}`);\n        console.log('üéØ Goal: Verify proper HTTP batch semantics');\n        console.log('‚ö†Ô∏è  Note: HTTP batch sessions END after sending');\n        console.log('');\n\n        // Test 1: Batch operations in single request\n        await this.test('Batch Operations', () => this.batchOperations());\n\n        // Test 2: Session isolation (each gets own batch)\n        await this.test('Session Isolation', () => this.sessionIsolation());\n\n        // Test 3: Concurrent operations in single batch\n        await this.test('Concurrent Batch Operations', () => this.concurrentBatchOperations());\n\n        // Test 4: Error handling within batch\n        await this.test('Error Handling in Batch', () => this.errorHandlingInBatch());\n\n        // Test 5: Multiple sequential batches (new sessions)\n        await this.test('Multiple Batch Requests', () => this.multipleBatchRequests());\n\n        // Results\n        console.log('\\n' + '='.repeat(60));\n        console.log('üèÅ TIER 2 (HTTP BATCH) RESULTS');\n        console.log('='.repeat(60));\n\n        const passRate = Math.round((this.passed / this.total) * 100);\n        console.log(`‚úÖ Passed: ${this.passed}/${this.total} (${passRate}%)`);\n\n        if (this.passed === this.total) {\n            console.log('üéâ TIER 2 COMPLETE: HTTP batch semantics working correctly!');\n            console.log('üìà For persistent sessions, use WebSocket transport');\n            process.exit(0);\n        } else if (this.passed >= this.total * 0.6) {\n            console.log('‚ö†Ô∏è  TIER 2 PARTIAL: Some batch handling issues');\n            process.exit(1);\n        } else {\n            console.log('üí• TIER 2 FAILED: Batch handling not working');\n            process.exit(2);\n        }\n    }\n}\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n    process.exit(3);\n});\n\n// Run tests\nconst tier2 = new Tier2BatchTests();\ntier2.run();"],"mappings":"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","names":[]}
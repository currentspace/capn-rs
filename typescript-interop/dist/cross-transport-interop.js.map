{"version":3,"sources":["../src/cross-transport-interop.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { newHttpBatchRpcSession, newWebSocketRpcSession } from 'capnweb';\n\n/**\n * Cross-Transport Interoperability Tests\n *\n * Goal: Verify seamless interoperability between HTTP Batch and WebSocket transports\n * Tests: Mixed transport scenarios, transport switching, performance comparisons\n * Success Criteria: Both transports produce identical results with transport-specific advantages\n *\n * Prerequisites: All Tier 1, Tier 2, and Tier 3 tests must pass for both transports\n */\n\ninterface Calculator {\n    add(a: number, b: number): Promise<number>;\n    multiply(a: number, b: number): Promise<number>;\n    divide(a: number, b: number): Promise<number>;\n    subtract(a: number, b: number): Promise<number>;\n}\n\nconst port = process.argv[2] || '9001';\nconst httpEndpoint = `http://localhost:${port}/rpc/batch`;\nconst wsEndpoint = `ws://localhost:${port}/rpc/ws`;\n\nclass CrossTransportInteropTests {\n    private passed = 0;\n    private total = 0;\n\n    private async test(name: string, testFn: () => Promise<boolean>): Promise<void> {\n        this.total++;\n        console.log(`\\nüîÑ Test ${this.total}: ${name}`);\n        console.log('‚îÄ'.repeat(80));\n\n        try {\n            const result = await testFn();\n            if (result) {\n                this.passed++;\n                console.log('‚úÖ PASSED');\n            } else {\n                console.log('‚ùå FAILED');\n            }\n        } catch (error: any) {\n            console.log(`‚ùå FAILED: ${error.message}`);\n        }\n    }\n\n    private async transportEquivalenceTest(): Promise<boolean> {\n        console.log('Testing computational equivalence between HTTP Batch and WebSocket...');\n\n        try {\n            // Same calculations on both transports\n            const testCases = [\n                { op: 'add', args: [15, 25] },\n                { op: 'multiply', args: [7, 8] },\n                { op: 'divide', args: [100, 4] },\n                { op: 'subtract', args: [50, 18] }\n            ];\n\n            console.log('üåê Executing calculations on HTTP Batch transport...');\n            const httpSession = newHttpBatchRpcSession<Calculator>(httpEndpoint);\n            const httpResults: number[] = [];\n\n            for (const testCase of testCases) {\n                let result: number;\n                switch (testCase.op) {\n                    case 'add':\n                        result = await httpSession.add(testCase.args[0], testCase.args[1]);\n                        break;\n                    case 'multiply':\n                        result = await httpSession.multiply(testCase.args[0], testCase.args[1]);\n                        break;\n                    case 'divide':\n                        result = await httpSession.divide(testCase.args[0], testCase.args[1]);\n                        break;\n                    case 'subtract':\n                        result = await httpSession.subtract(testCase.args[0], testCase.args[1]);\n                        break;\n                    default:\n                        throw new Error(`Unknown operation: ${testCase.op}`);\n                }\n                httpResults.push(result);\n                console.log(`  HTTP ${testCase.op}(${testCase.args.join(', ')}) = ${result}`);\n            }\n\n            console.log('üîå Executing same calculations on WebSocket transport...');\n            const wsSession = newWebSocketRpcSession<Calculator>(wsEndpoint);\n            const wsResults: number[] = [];\n\n            for (const testCase of testCases) {\n                let result: number;\n                switch (testCase.op) {\n                    case 'add':\n                        result = await wsSession.add(testCase.args[0], testCase.args[1]);\n                        break;\n                    case 'multiply':\n                        result = await wsSession.multiply(testCase.args[0], testCase.args[1]);\n                        break;\n                    case 'divide':\n                        result = await wsSession.divide(testCase.args[0], testCase.args[1]);\n                        break;\n                    case 'subtract':\n                        result = await wsSession.subtract(testCase.args[0], testCase.args[1]);\n                        break;\n                    default:\n                        throw new Error(`Unknown operation: ${testCase.op}`);\n                }\n                wsResults.push(result);\n                console.log(`  WebSocket ${testCase.op}(${testCase.args.join(', ')}) = ${result}`);\n            }\n\n            // Clean up WebSocket session\n            if ('close' in wsSession) {\n                (wsSession as any).close();\n            }\n\n            console.log('üîç Transport Equivalence Analysis:');\n            console.log(`  HTTP Results:     [${httpResults.join(', ')}]`);\n            console.log(`  WebSocket Results: [${wsResults.join(', ')}]`);\n\n            const resultsMatch = JSON.stringify(httpResults) === JSON.stringify(wsResults);\n\n            if (resultsMatch) {\n                console.log('‚úì Both transports produced identical computational results');\n                console.log('‚úì Transport abstraction maintains mathematical consistency');\n                return true;\n            } else {\n                console.log('‚úó Transport results differ - computational inconsistency detected');\n                return false;\n            }\n\n        } catch (error: any) {\n            console.log(`Transport equivalence test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async performanceCharacteristicsComparison(): Promise<boolean> {\n        console.log('Comparing performance characteristics between transports...');\n\n        try {\n            const operationCount = 10;\n            const operations = Array.from({length: operationCount}, (_, i) => ({\n                op: ['add', 'multiply', 'subtract', 'divide'][i % 4],\n                args: [i + 1, i + 2]\n            }));\n\n            console.log('‚è±Ô∏è  HTTP Batch Performance Test...');\n            const httpStart = Date.now();\n            const httpSession = newHttpBatchRpcSession<Calculator>(httpEndpoint);\n\n            const httpResults: number[] = [];\n            for (const operation of operations) {\n                let result: number;\n                switch (operation.op) {\n                    case 'add':\n                        result = await httpSession.add(operation.args[0], operation.args[1]);\n                        break;\n                    case 'multiply':\n                        result = await httpSession.multiply(operation.args[0], operation.args[1]);\n                        break;\n                    case 'subtract':\n                        result = await httpSession.subtract(operation.args[0], operation.args[1]);\n                        break;\n                    case 'divide':\n                        result = await httpSession.divide(operation.args[0], operation.args[1]);\n                        break;\n                    default:\n                        throw new Error(`Unknown operation: ${operation.op}`);\n                }\n                httpResults.push(result);\n            }\n            const httpDuration = Date.now() - httpStart;\n\n            console.log('‚ö° WebSocket Performance Test...');\n            const wsStart = Date.now();\n            const wsSession = newWebSocketRpcSession<Calculator>(wsEndpoint);\n\n            const wsResults: number[] = [];\n            for (const operation of operations) {\n                let result: number;\n                switch (operation.op) {\n                    case 'add':\n                        result = await wsSession.add(operation.args[0], operation.args[1]);\n                        break;\n                    case 'multiply':\n                        result = await wsSession.multiply(operation.args[0], operation.args[1]);\n                        break;\n                    case 'subtract':\n                        result = await wsSession.subtract(operation.args[0], operation.args[1]);\n                        break;\n                    case 'divide':\n                        result = await wsSession.divide(operation.args[0], operation.args[1]);\n                        break;\n                    default:\n                        throw new Error(`Unknown operation: ${operation.op}`);\n                }\n                wsResults.push(result);\n            }\n            const wsDuration = Date.now() - wsStart;\n\n            // Clean up WebSocket session\n            if ('close' in wsSession) {\n                (wsSession as any).close();\n            }\n\n            console.log('üìä Performance Analysis:');\n            console.log(`  HTTP Batch:    ${httpDuration}ms total, ${(httpDuration/operationCount).toFixed(1)}ms/op`);\n            console.log(`  WebSocket:     ${wsDuration}ms total, ${(wsDuration/operationCount).toFixed(1)}ms/op`);\n\n            const performanceRatio = httpDuration / wsDuration;\n            console.log(`  Performance Ratio: ${performanceRatio.toFixed(2)}x (${performanceRatio > 1 ? 'WebSocket faster' : 'HTTP faster'})`);\n\n            // Verify computational consistency\n            const resultsMatch = JSON.stringify(httpResults) === JSON.stringify(wsResults);\n\n            console.log('üîç Consistency Check:');\n            console.log(`  Results identical: ${resultsMatch ? '‚úì' : '‚úó'}`);\n            console.log(`  HTTP throughput:   ${(operationCount / httpDuration * 1000).toFixed(0)} ops/sec`);\n            console.log(`  WebSocket throughput: ${(operationCount / wsDuration * 1000).toFixed(0)} ops/sec`);\n\n            if (resultsMatch) {\n                console.log('‚úì Both transports maintain computational consistency');\n                console.log('‚úì Performance characteristics measured and compared');\n\n                // WebSocket should generally be faster for sequential operations\n                if (performanceRatio > 0.8) {\n                    console.log('‚úì Performance characteristics within expected ranges');\n                }\n\n                return true;\n            } else {\n                console.log('‚úó Computational inconsistency between transports');\n                return false;\n            }\n\n        } catch (error: any) {\n            console.log(`Performance comparison test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async concurrentTransportUsage(): Promise<boolean> {\n        console.log('Testing concurrent usage of both transport types...');\n\n        try {\n            console.log('üöÄ Launching concurrent operations across both transports...');\n\n            // Create sessions on both transports\n            const httpSession = newHttpBatchRpcSession<Calculator>(httpEndpoint);\n            const wsSession = newWebSocketRpcSession<Calculator>(wsEndpoint);\n\n            const startTime = Date.now();\n\n            // Launch operations concurrently across transports\n            const concurrentOps = await Promise.all([\n                // HTTP operations\n                httpSession.add(10, 20),\n                httpSession.multiply(5, 6),\n                httpSession.subtract(100, 25),\n\n                // WebSocket operations\n                wsSession.add(15, 35),\n                wsSession.multiply(7, 8),\n                wsSession.subtract(200, 50)\n            ]);\n\n            const duration = Date.now() - startTime;\n\n            // Clean up WebSocket session\n            if ('close' in wsSession) {\n                (wsSession as any).close();\n            }\n\n            console.log('üìä Concurrent Operation Results:');\n            console.log(`  HTTP add(10, 20): ${concurrentOps[0]}`);\n            console.log(`  HTTP multiply(5, 6): ${concurrentOps[1]}`);\n            console.log(`  HTTP subtract(100, 25): ${concurrentOps[2]}`);\n            console.log(`  WebSocket add(15, 35): ${concurrentOps[3]}`);\n            console.log(`  WebSocket multiply(7, 8): ${concurrentOps[4]}`);\n            console.log(`  WebSocket subtract(200, 50): ${concurrentOps[5]}`);\n\n            console.log(`‚è±Ô∏è  Total concurrent execution time: ${duration}ms`);\n            console.log(`    Average per operation: ${(duration / 6).toFixed(1)}ms`);\n\n            // Verify results\n            const expectedResults = [30, 30, 75, 50, 56, 150];\n            const resultsCorrect = concurrentOps.every((result, i) => result === expectedResults[i]);\n\n            console.log('üîç Verification:');\n            console.log(`  Expected: [${expectedResults.join(', ')}]`);\n            console.log(`  Actual:   [${concurrentOps.join(', ')}]`);\n            console.log(`  All correct: ${resultsCorrect ? '‚úì' : '‚úó'}`);\n\n            if (resultsCorrect) {\n                console.log('‚úì Concurrent transport usage working perfectly');\n                console.log('‚úì Both transports can be used simultaneously without interference');\n                console.log('‚úì No resource conflicts or computation errors detected');\n                return true;\n            } else {\n                console.log('‚úó Concurrent transport usage produced incorrect results');\n                return false;\n            }\n\n        } catch (error: any) {\n            console.log(`Concurrent transport usage test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async errorHandlingConsistency(): Promise<boolean> {\n        console.log('Testing error handling consistency across transports...');\n\n        try {\n            console.log('üß™ Testing error scenarios on both transports...');\n\n            const httpSession = newHttpBatchRpcSession<Calculator>(httpEndpoint);\n            const wsSession = newWebSocketRpcSession<Calculator>(wsEndpoint);\n\n            // Test identical error scenarios\n            let httpError: any = null;\n            let wsError: any = null;\n\n            console.log('  Triggering division by zero on HTTP Batch...');\n            try {\n                await httpSession.divide(10, 0);\n            } catch (error) {\n                httpError = error;\n                console.log(`    HTTP Error: ${error.message}`);\n            }\n\n            console.log('  Triggering division by zero on WebSocket...');\n            try {\n                await wsSession.divide(10, 0);\n            } catch (error) {\n                wsError = error;\n                console.log(`    WebSocket Error: ${error.message}`);\n            }\n\n            // Test recovery on both transports\n            console.log('  Testing error recovery...');\n            const httpRecovery = await httpSession.add(5, 7);\n            const wsRecovery = await wsSession.add(5, 7);\n\n            console.log(`    HTTP Recovery: ${httpRecovery}`);\n            console.log(`    WebSocket Recovery: ${wsRecovery}`);\n\n            // Clean up WebSocket session\n            if ('close' in wsSession) {\n                (wsSession as any).close();\n            }\n\n            console.log('üîç Error Handling Analysis:');\n            const bothErrored = httpError !== null && wsError !== null;\n            const errorMessagesMatch = httpError?.message === wsError?.message;\n            const recoveryMatches = httpRecovery === wsRecovery && httpRecovery === 12;\n\n            console.log(`  Both transports errored: ${bothErrored ? '‚úì' : '‚úó'}`);\n            console.log(`  Error messages consistent: ${errorMessagesMatch ? '‚úì' : '‚úó'}`);\n            console.log(`  Recovery successful: ${recoveryMatches ? '‚úì' : '‚úó'}`);\n\n            if (bothErrored && errorMessagesMatch && recoveryMatches) {\n                console.log('‚úì Error handling is consistent across both transports');\n                console.log('‚úì Both transports maintain session integrity after errors');\n                console.log('‚úì Error messages are standardized between transports');\n                return true;\n            } else {\n                console.log('‚úó Error handling inconsistencies detected between transports');\n                return false;\n            }\n\n        } catch (error: any) {\n            console.log(`Error handling consistency test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async transportSpecificAdvantagesTest(): Promise<boolean> {\n        console.log('Testing transport-specific advantages and use cases...');\n\n        try {\n            console.log('üìä WebSocket advantage: Real-time stream processing...');\n            const wsSession = newWebSocketRpcSession<Calculator>(wsEndpoint);\n\n            const streamStart = Date.now();\n            const streamValues = [1, 2, 3, 4, 5];\n            const streamResults: number[] = [];\n\n            for (const value of streamValues) {\n                const result = await wsSession.multiply(value, 2);\n                streamResults.push(result);\n            }\n            const streamDuration = Date.now() - streamStart;\n\n            console.log(`  WebSocket stream processing: ${streamDuration}ms for ${streamValues.length} operations`);\n            console.log(`  Results: [${streamResults.join(', ')}]`);\n\n            console.log('üîÑ HTTP advantage: Stateless bulk operations...');\n            const httpSession = newHttpBatchRpcSession<Calculator>(httpEndpoint);\n\n            const bulkStart = Date.now();\n\n            // HTTP can handle bulk operations efficiently in a single request/response cycle\n            const bulkOperations = await Promise.all([\n                httpSession.add(10, 10),\n                httpSession.add(20, 20),\n                httpSession.add(30, 30),\n                httpSession.add(40, 40),\n                httpSession.add(50, 50)\n            ]);\n            const bulkDuration = Date.now() - bulkStart;\n\n            console.log(`  HTTP bulk processing: ${bulkDuration}ms for ${bulkOperations.length} operations`);\n            console.log(`  Results: [${bulkOperations.join(', ')}]`);\n\n            // Clean up WebSocket session\n            if ('close' in wsSession) {\n                (wsSession as any).close();\n            }\n\n            console.log('üîç Transport Advantage Analysis:');\n            console.log(`  WebSocket avg/op: ${(streamDuration/streamValues.length).toFixed(1)}ms (persistent connection)`);\n            console.log(`  HTTP avg/op: ${(bulkDuration/bulkOperations.length).toFixed(1)}ms (stateless batch)`);\n\n            // Verify results are mathematically correct\n            const streamCorrect = streamResults.every((result, i) => result === streamValues[i] * 2);\n            const bulkCorrect = bulkOperations.every((result, i) => result === (i + 1) * 10 * 2);\n\n            console.log(`  WebSocket stream results correct: ${streamCorrect ? '‚úì' : '‚úó'}`);\n            console.log(`  HTTP bulk results correct: ${bulkCorrect ? '‚úì' : '‚úó'}`);\n\n            if (streamCorrect && bulkCorrect) {\n                console.log('‚úì Both transports demonstrate their specific advantages');\n                console.log('‚úì WebSocket excels at real-time streaming scenarios');\n                console.log('‚úì HTTP Batch excels at stateless bulk operations');\n                return true;\n            } else {\n                console.log('‚úó Transport advantages not properly demonstrated');\n                return false;\n            }\n\n        } catch (error: any) {\n            console.log(`Transport advantages test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    async run(): Promise<void> {\n        console.log('üîÑ Cross-Transport Interoperability Tests');\n        console.log('=====================================');\n        console.log(`üìç Testing endpoints:`);\n        console.log(`   HTTP Batch: ${httpEndpoint}`);\n        console.log(`   WebSocket:  ${wsEndpoint}`);\n        console.log('üéØ Goal: Verify seamless interoperability between transport types');\n        console.log('üìã Prerequisites: All Tier 1, 2, and 3 tests must pass for both transports');\n        console.log('');\n\n        // Test 1: Transport equivalence\n        await this.test('Transport Computational Equivalence', () => this.transportEquivalenceTest());\n\n        // Test 2: Performance characteristics\n        await this.test('Performance Characteristics Comparison', () => this.performanceCharacteristicsComparison());\n\n        // Test 3: Concurrent transport usage\n        await this.test('Concurrent Multi-Transport Usage', () => this.concurrentTransportUsage());\n\n        // Test 4: Error handling consistency\n        await this.test('Error Handling Consistency', () => this.errorHandlingConsistency());\n\n        // Test 5: Transport-specific advantages\n        await this.test('Transport-Specific Advantages', () => this.transportSpecificAdvantagesTest());\n\n        // Results\n        console.log('\\n' + '='.repeat(80));\n        console.log('üîÑ CROSS-TRANSPORT INTEROPERABILITY RESULTS');\n        console.log('='.repeat(80));\n\n        const passRate = Math.round((this.passed / this.total) * 100);\n        console.log(`‚úÖ Passed: ${this.passed}/${this.total} (${passRate}%)`);\n\n        if (this.passed === this.total) {\n            console.log('üéâ CROSS-TRANSPORT INTEROPERABILITY COMPLETE!');\n            console.log('üöÄ HTTP Batch and WebSocket transports are fully interoperable');\n            console.log('‚ö° Both transports provide consistent Cap\\'n Web protocol implementation');\n            console.log('üèÜ Production-ready multi-transport Cap\\'n Web server achieved!');\n            console.log('üìä Applications can seamlessly choose optimal transport for their use case');\n            process.exit(0);\n        } else if (this.passed >= this.total * 0.8) {\n            console.log('‚≠ê CROSS-TRANSPORT INTEROPERABILITY EXCELLENT!');\n            console.log('üîß Minor transport differences detected, but overall compatibility is strong');\n            process.exit(0);\n        } else {\n            console.log('üí• CROSS-TRANSPORT INTEROPERABILITY ISSUES DETECTED');\n            console.log('üö® Significant transport inconsistencies require attention');\n            process.exit(1);\n        }\n    }\n}\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n    process.exit(3);\n});\n\n// Run tests\nconst crossTransportTests = new CrossTransportInteropTests();\ncrossTransportTests.run();"],"mappings":"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","names":[]}
{"version":3,"sources":["../src/fixed-official-client-test.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { newHttpBatchRpcSession } from 'capnweb';\n\n// Define the Calculator interface\ninterface Calculator {\n    add(a: number, b: number): Promise<number>;\n    multiply(a: number, b: number): Promise<number>;\n    divide(a: number, b: number): Promise<number>;\n    subtract(a: number, b: number): Promise<number>;\n}\n\nasync function testWithOfficialClient() {\n    console.log('üß™ Testing Cap\\'n Web Rust Server with Official TypeScript Client');\n    console.log('================================================================\\n');\n\n    try {\n        const port = process.argv[2] || '9006';\n        const endpoint = `http://localhost:${port}/rpc/batch`;\n\n        console.log('‚úÖ Created endpoint configuration');\n        console.log(`üìç Endpoint: ${endpoint}\\n`);\n\n        // Test 1: Single operation per batch (correct pattern)\n        console.log('Test 1: Single Operations (New Session Per Call)');\n        console.log('------------------------------------------------');\n\n        const session1 = newHttpBatchRpcSession<Calculator>(endpoint);\n        const result1 = await session1.add(5, 3);\n        console.log(`‚úÖ add(5, 3) = ${result1}`);\n\n        const session2 = newHttpBatchRpcSession<Calculator>(endpoint);\n        const result2 = await session2.multiply(7, 6);\n        console.log(`‚úÖ multiply(7, 6) = ${result2}`);\n\n        const session3 = newHttpBatchRpcSession<Calculator>(endpoint);\n        const result3 = await session3.divide(100, 4);\n        console.log(`‚úÖ divide(100, 4) = ${result3}`);\n\n        const session4 = newHttpBatchRpcSession<Calculator>(endpoint);\n        const result4 = await session4.subtract(10, 3);\n        console.log(`‚úÖ subtract(10, 3) = ${result4}`);\n\n        // Test 2: True batching - multiple operations in one batch\n        console.log('\\nTest 2: True Batching (Multiple Operations in One Request)');\n        console.log('----------------------------------------------------------');\n\n        const batchSession = newHttpBatchRpcSession<Calculator>(endpoint);\n\n        // Queue all operations before awaiting\n        const addPromise = batchSession.add(10, 20);\n        const multiplyPromise = batchSession.multiply(3, 4);\n        const dividePromise = batchSession.divide(100, 5);\n        const subtractPromise = batchSession.subtract(50, 15);\n\n        // Now await all at once - this sends ONE HTTP request with all operations\n        const [addResult, multiplyResult, divideResult, subtractResult] =\n            await Promise.all([addPromise, multiplyPromise, dividePromise, subtractPromise]);\n\n        console.log(`‚úÖ Batch results:`);\n        console.log(`   add(10, 20) = ${addResult}`);\n        console.log(`   multiply(3, 4) = ${multiplyResult}`);\n        console.log(`   divide(100, 5) = ${divideResult}`);\n        console.log(`   subtract(50, 15) = ${subtractResult}`);\n\n        // Test 3: Error handling\n        console.log('\\nTest 3: Error Handling');\n        console.log('----------------------');\n\n        try {\n            const errorSession = newHttpBatchRpcSession<Calculator>(endpoint);\n            await errorSession.divide(10, 0);\n            console.log('‚ùå Should have thrown for division by zero');\n        } catch (error: any) {\n            console.log(`‚úÖ Division by zero correctly threw error: ${error.message}`);\n        }\n\n        console.log('\\n================================================================================');\n        console.log('üéâ SUCCESS: All tests passed!');\n        console.log('================================================================================');\n        console.log('‚úÖ Rust server is fully compatible with official Cap\\'n Web TypeScript client');\n        console.log('‚úÖ Single operations work with new sessions');\n        console.log('‚úÖ True batching works with multiple operations in one request');\n        console.log('‚úÖ Error handling works correctly');\n\n    } catch (error: any) {\n        console.error('\\n‚ùå Test failed:', error.message);\n        console.error('Stack:', error.stack);\n        process.exit(1);\n    }\n}\n\ntestWithOfficialClient().catch(console.error);"],"mappings":";;;AAEA,SAAS,8BAA8B;AAUvC,eAAe,yBAAyB;AACpC,UAAQ,IAAI,yEAAmE;AAC/E,UAAQ,IAAI,oEAAoE;AAEhF,MAAI;AACA,UAAM,OAAO,QAAQ,KAAK,CAAC,KAAK;AAChC,UAAM,WAAW,oBAAoB,IAAI;AAEzC,YAAQ,IAAI,uCAAkC;AAC9C,YAAQ,IAAI,uBAAgB,QAAQ;AAAA,CAAI;AAGxC,YAAQ,IAAI,kDAAkD;AAC9D,YAAQ,IAAI,kDAAkD;AAE9D,UAAM,WAAW,uBAAmC,QAAQ;AAC5D,UAAM,UAAU,MAAM,SAAS,IAAI,GAAG,CAAC;AACvC,YAAQ,IAAI,sBAAiB,OAAO,EAAE;AAEtC,UAAM,WAAW,uBAAmC,QAAQ;AAC5D,UAAM,UAAU,MAAM,SAAS,SAAS,GAAG,CAAC;AAC5C,YAAQ,IAAI,2BAAsB,OAAO,EAAE;AAE3C,UAAM,WAAW,uBAAmC,QAAQ;AAC5D,UAAM,UAAU,MAAM,SAAS,OAAO,KAAK,CAAC;AAC5C,YAAQ,IAAI,2BAAsB,OAAO,EAAE;AAE3C,UAAM,WAAW,uBAAmC,QAAQ;AAC5D,UAAM,UAAU,MAAM,SAAS,SAAS,IAAI,CAAC;AAC7C,YAAQ,IAAI,4BAAuB,OAAO,EAAE;AAG5C,YAAQ,IAAI,8DAA8D;AAC1E,YAAQ,IAAI,4DAA4D;AAExE,UAAM,eAAe,uBAAmC,QAAQ;AAGhE,UAAM,aAAa,aAAa,IAAI,IAAI,EAAE;AAC1C,UAAM,kBAAkB,aAAa,SAAS,GAAG,CAAC;AAClD,UAAM,gBAAgB,aAAa,OAAO,KAAK,CAAC;AAChD,UAAM,kBAAkB,aAAa,SAAS,IAAI,EAAE;AAGpD,UAAM,CAAC,WAAW,gBAAgB,cAAc,cAAc,IAC1D,MAAM,QAAQ,IAAI,CAAC,YAAY,iBAAiB,eAAe,eAAe,CAAC;AAEnF,YAAQ,IAAI,uBAAkB;AAC9B,YAAQ,IAAI,oBAAoB,SAAS,EAAE;AAC3C,YAAQ,IAAI,uBAAuB,cAAc,EAAE;AACnD,YAAQ,IAAI,uBAAuB,YAAY,EAAE;AACjD,YAAQ,IAAI,yBAAyB,cAAc,EAAE;AAGrD,YAAQ,IAAI,0BAA0B;AACtC,YAAQ,IAAI,wBAAwB;AAEpC,QAAI;AACA,YAAM,eAAe,uBAAmC,QAAQ;AAChE,YAAM,aAAa,OAAO,IAAI,CAAC;AAC/B,cAAQ,IAAI,gDAA2C;AAAA,IAC3D,SAAS,OAAY;AACjB,cAAQ,IAAI,kDAA6C,MAAM,OAAO,EAAE;AAAA,IAC5E;AAEA,YAAQ,IAAI,oFAAoF;AAChG,YAAQ,IAAI,sCAA+B;AAC3C,YAAQ,IAAI,kFAAkF;AAC9F,YAAQ,IAAI,kFAA8E;AAC1F,YAAQ,IAAI,iDAA4C;AACxD,YAAQ,IAAI,oEAA+D;AAC3E,YAAQ,IAAI,uCAAkC;AAAA,EAElD,SAAS,OAAY;AACjB,YAAQ,MAAM,yBAAoB,MAAM,OAAO;AAC/C,YAAQ,MAAM,UAAU,MAAM,KAAK;AACnC,YAAQ,KAAK,CAAC;AAAA,EAClB;AACJ;AAEA,uBAAuB,EAAE,MAAM,QAAQ,KAAK;","names":[]}
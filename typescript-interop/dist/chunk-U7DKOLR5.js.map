{"version":3,"sources":["../src/advanced-server-test.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { newHttpBatchRpcSession } from 'capnweb';\n\n// Define the CounterService interface for the advanced stateful server\ninterface CounterService {\n    // Global counter operations\n    increment_global(counterName: string): Promise<number>;\n    decrement_global(counterName: string): Promise<number>;\n    get_global(counterName: string): Promise<number>;\n    reset_global(counterName: string): Promise<number>;\n    list_global_counters(): Promise<any[]>;\n\n    // Session-specific operations\n    increment_session(sessionId: string, counterName: string): Promise<number>;\n    get_session(sessionId: string, counterName: string): Promise<number>;\n\n    // Session property management\n    set_session_property(sessionId: string, propertyName: string, value: any): Promise<any>;\n    get_session_property(sessionId: string, propertyName: string): Promise<any>;\n\n    // Administrative operations\n    list_sessions(): Promise<any[]>;\n    cleanup_sessions(): Promise<string>;\n\n    // Advanced capability operations\n    get_async_processor(): Promise<string>;\n    get_nested_capability(operationId: string): Promise<string>;\n}\n\nasync function testAdvancedStatefulServer() {\n    console.log('üß™ Testing Advanced Stateful Cap\\'n Web Rust Server');\n    console.log('==================================================\\n');\n\n    try {\n        // Create a session with the advanced Rust server\n        const session = newHttpBatchRpcSession<CounterService>('http://localhost:8081/rpc/batch');\n\n        console.log('‚úÖ Created session with advanced stateful Rust server');\n        console.log('üìç Endpoint: http://localhost:8081/rpc/batch\\n');\n\n        // Test 1: Global counter operations\n        console.log('Test 1: Global Counter Operations');\n        console.log('==================================');\n\n        try {\n            // Reset counter first\n            await session.reset_global('test_counter');\n            console.log('‚úÖ Reset test_counter to 0');\n\n            // Test increment\n            let result = await session.increment_global('test_counter');\n            console.log(`‚úÖ increment_global('test_counter') = ${result}`);\n            assert(result === 1, `Expected 1, got ${result}`);\n\n            // Test another increment\n            result = await session.increment_global('test_counter');\n            console.log(`‚úÖ increment_global('test_counter') = ${result}`);\n            assert(result === 2, `Expected 2, got ${result}`);\n\n            // Test decrement\n            result = await session.decrement_global('test_counter');\n            console.log(`‚úÖ decrement_global('test_counter') = ${result}`);\n            assert(result === 1, `Expected 1, got ${result}`);\n\n            // Test get\n            result = await session.get_global('test_counter');\n            console.log(`‚úÖ get_global('test_counter') = ${result}`);\n            assert(result === 1, `Expected 1, got ${result}`);\n\n        } catch (error) {\n            console.log(`‚ùå Global counter operations failed: ${error}`);\n            throw error;\n        }\n\n        // Test 2: Session-specific counters\n        console.log('\\nTest 2: Session-Specific Operations');\n        console.log('====================================');\n\n        try {\n            const sessionId = 'test-session-' + Date.now();\n\n            // Test session increment\n            let result = await session.increment_session(sessionId, 'session_counter');\n            console.log(`‚úÖ increment_session('${sessionId}', 'session_counter') = ${result}`);\n            assert(result === 1, `Expected 1, got ${result}`);\n\n            // Test another increment\n            result = await session.increment_session(sessionId, 'session_counter');\n            console.log(`‚úÖ increment_session('${sessionId}', 'session_counter') = ${result}`);\n            assert(result === 2, `Expected 2, got ${result}`);\n\n            // Test different counter in same session\n            result = await session.increment_session(sessionId, 'another_counter');\n            console.log(`‚úÖ increment_session('${sessionId}', 'another_counter') = ${result}`);\n            assert(result === 1, `Expected 1, got ${result}`);\n\n            // Test get session counter\n            result = await session.get_session(sessionId, 'session_counter');\n            console.log(`‚úÖ get_session('${sessionId}', 'session_counter') = ${result}`);\n            assert(result === 2, `Expected 2, got ${result}`);\n\n        } catch (error) {\n            console.log(`‚ùå Session operations failed: ${error}`);\n            throw error;\n        }\n\n        // Test 3: Session property management\n        console.log('\\nTest 3: Session Property Management');\n        console.log('===================================');\n\n        try {\n            const sessionId = 'prop-session-' + Date.now();\n\n            // Set string property\n            let result = await session.set_session_property(sessionId, 'user_name', 'Alice');\n            console.log(`‚úÖ set_session_property('${sessionId}', 'user_name', 'Alice') = ${JSON.stringify(result)}`);\n\n            // Set number property\n            result = await session.set_session_property(sessionId, 'user_age', 25);\n            console.log(`‚úÖ set_session_property('${sessionId}', 'user_age', 25) = ${JSON.stringify(result)}`);\n\n            // Set object property\n            const userData = { preferences: { theme: 'dark', language: 'en' } };\n            result = await session.set_session_property(sessionId, 'user_data', userData);\n            console.log(`‚úÖ set_session_property with object = ${JSON.stringify(result)}`);\n\n            // Get string property\n            result = await session.get_session_property(sessionId, 'user_name');\n            console.log(`‚úÖ get_session_property('${sessionId}', 'user_name') = ${JSON.stringify(result)}`);\n            assert(result === 'Alice', `Expected 'Alice', got ${result}`);\n\n            // Get number property\n            result = await session.get_session_property(sessionId, 'user_age');\n            console.log(`‚úÖ get_session_property('${sessionId}', 'user_age') = ${JSON.stringify(result)}`);\n            assert(result === 25, `Expected 25, got ${result}`);\n\n        } catch (error) {\n            console.log(`‚ùå Session property operations failed: ${error}`);\n            throw error;\n        }\n\n        // Test 4: Concurrent operations\n        console.log('\\nTest 4: Concurrent Operations');\n        console.log('==============================');\n\n        try {\n            // Test concurrent global counter operations\n            const promises = [\n                session.increment_global('concurrent_counter'),\n                session.increment_global('concurrent_counter'),\n                session.increment_global('concurrent_counter'),\n                session.increment_global('concurrent_counter'),\n                session.increment_global('concurrent_counter')\n            ];\n\n            const results = await Promise.all(promises);\n            console.log(`‚úÖ Concurrent increments results: [${results.join(', ')}]`);\n\n            // Results should be unique (1, 2, 3, 4, 5) in some order\n            const sortedResults = [...results].sort((a, b) => a - b);\n            const expected = [1, 2, 3, 4, 5];\n            assert(JSON.stringify(sortedResults) === JSON.stringify(expected),\n                   `Expected [1,2,3,4,5], got [${sortedResults.join(',')}]`);\n\n            // Test concurrent session operations\n            const sessionId = 'concurrent-session-' + Date.now();\n            const sessionPromises = [\n                session.increment_session(sessionId, 'counter1'),\n                session.increment_session(sessionId, 'counter2'),\n                session.increment_session(sessionId, 'counter3'),\n                session.set_session_property(sessionId, 'test_prop', 'test_value'),\n                session.increment_session(sessionId, 'counter1') // This should make counter1 = 2\n            ];\n\n            await Promise.all(sessionPromises);\n            console.log('‚úÖ Concurrent session operations completed');\n\n            // Verify final state\n            const counter1 = await session.get_session(sessionId, 'counter1');\n            console.log(`‚úÖ Final counter1 value: ${counter1}`);\n            assert(counter1 === 2, `Expected counter1 = 2, got ${counter1}`);\n\n        } catch (error) {\n            console.log(`‚ùå Concurrent operations failed: ${error}`);\n            throw error;\n        }\n\n        // Test 5: Error handling\n        console.log('\\nTest 5: Error Handling');\n        console.log('======================');\n\n        try {\n            // Test getting non-existent session property\n            try {\n                await session.get_session_property('non-existent-session', 'non-existent-prop');\n                console.log('‚ùå Should have thrown error for non-existent property');\n            } catch (error) {\n                console.log(`‚úÖ Correctly threw error for non-existent property: ${error}`);\n            }\n\n            // Test invalid method call with wrong number of arguments\n            try {\n                // @ts-ignore - Intentionally calling with wrong args\n                await (session as any).increment_global();\n                console.log('‚ùå Should have thrown error for missing arguments');\n            } catch (error) {\n                console.log(`‚úÖ Correctly threw error for missing arguments: ${error}`);\n            }\n\n        } catch (error) {\n            console.log(`‚ùå Error handling test failed: ${error}`);\n            throw error;\n        }\n\n        // Test 6: List operations\n        console.log('\\nTest 6: List Operations');\n        console.log('=======================');\n\n        try {\n            // List global counters\n            const globalCounters = await session.list_global_counters();\n            console.log(`‚úÖ Global counters: ${JSON.stringify(globalCounters, null, 2)}`);\n            assert(Array.isArray(globalCounters), 'Expected array of global counters');\n\n            // Verify we have our test counters\n            const testCounter = globalCounters.find(c => c.name === 'test_counter');\n            assert(testCounter !== undefined, 'Expected to find test_counter');\n            assert(testCounter && testCounter.value === 1, `Expected test_counter value 1, got ${testCounter?.value}`);\n\n            // List sessions\n            const sessions = await session.list_sessions();\n            console.log(`‚úÖ Sessions: ${JSON.stringify(sessions, null, 2)}`);\n            assert(Array.isArray(sessions), 'Expected array of sessions');\n            assert(sessions.length > 0, 'Expected at least one session');\n\n        } catch (error) {\n            console.log(`‚ùå List operations failed: ${error}`);\n            throw error;\n        }\n\n        // Test 7: Session persistence across requests\n        console.log('\\nTest 7: Session Persistence');\n        console.log('============================');\n\n        try {\n            const persistentSessionId = 'persistent-session-' + Date.now();\n\n            // Set initial state\n            await session.increment_session(persistentSessionId, 'persistent_counter');\n            await session.set_session_property(persistentSessionId, 'persistent_prop', 'persistent_value');\n\n            // Wait a bit to simulate time passing\n            await new Promise(resolve => setTimeout(resolve, 100));\n\n            // Verify state is still there\n            const counterValue = await session.get_session(persistentSessionId, 'persistent_counter');\n            const propValue = await session.get_session_property(persistentSessionId, 'persistent_prop');\n\n            console.log(`‚úÖ Persistent counter value: ${counterValue}`);\n            console.log(`‚úÖ Persistent property value: ${JSON.stringify(propValue)}`);\n\n            assert(counterValue === 1, `Expected persistent counter = 1, got ${counterValue}`);\n            assert(propValue === 'persistent_value', `Expected 'persistent_value', got ${propValue}`);\n\n        } catch (error) {\n            console.log(`‚ùå Session persistence test failed: ${error}`);\n            throw error;\n        }\n\n        // Test 8: Advanced capabilities\n        console.log('\\nTest 8: Advanced Capabilities');\n        console.log('==============================');\n\n        try {\n            // Test async processor\n            const asyncProcessor = await session.get_async_processor();\n            console.log(`‚úÖ Created async processor: ${asyncProcessor}`);\n\n            // Test nested capability\n            const nestedCap = await session.get_nested_capability('test-operation-123');\n            console.log(`‚úÖ Created nested capability: ${nestedCap}`);\n\n        } catch (error) {\n            console.log(`‚ùå Advanced capabilities test failed: ${error}`);\n            throw error;\n        }\n\n        // Test 9: Cleanup operations\n        console.log('\\nTest 9: Cleanup Operations');\n        console.log('===========================');\n\n        try {\n            const cleanupResult = await session.cleanup_sessions();\n            console.log(`‚úÖ Session cleanup result: ${cleanupResult}`);\n\n        } catch (error) {\n            console.log(`‚ùå Cleanup operations failed: ${error}`);\n            throw error;\n        }\n\n        console.log('\\n' + '='.repeat(80));\n        console.log('üéâ ADVANCED SERVER VALIDATION SUMMARY');\n        console.log('='.repeat(80));\n        console.log('‚úÖ Advanced stateful server functionality working correctly!');\n        console.log('‚úÖ Global and session-specific counters');\n        console.log('‚úÖ Session property management');\n        console.log('‚úÖ Concurrent operations');\n        console.log('‚úÖ Error handling');\n        console.log('‚úÖ List operations');\n        console.log('‚úÖ Session persistence');\n        console.log('‚úÖ Advanced capabilities');\n        console.log('‚úÖ Cleanup operations');\n        console.log('\\nüöÄ The Rust Cap\\'n Web server is ready for production use!');\n\n    } catch (error) {\n        console.error('\\nüí• Fatal error:', error);\n        console.error('\\nThis indicates an issue with the advanced stateful server implementation.');\n        process.exit(1);\n    }\n}\n\n// Helper function for assertions\nfunction assert(condition: boolean, message: string) {\n    if (!condition) {\n        throw new Error(`Assertion failed: ${message}`);\n    }\n}\n\n// Run the test if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n    testAdvancedStatefulServer().catch(error => {\n        console.error('Unhandled error:', error);\n        process.exit(1);\n    });\n}\n\nexport { testAdvancedStatefulServer };"],"mappings":"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","names":[]}
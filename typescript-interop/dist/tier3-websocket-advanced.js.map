{"version":3,"sources":["../src/tier3-websocket-advanced.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { newWebSocketRpcSession } from 'capnweb';\n\n/**\n * TIER 3 WebSocket: Advanced Complex Application Logic Tests\n *\n * Goal: Test sophisticated real-world scenarios over WebSocket transport\n * Tests: Advanced workflows, capability composition, cross-session coordination\n * Success Criteria: Full-featured applications working over persistent WebSocket\n *\n * Prerequisites: Tier 1 and Tier 2 WebSocket tests must pass\n */\n\ninterface AdvancedCalculator {\n    // Basic operations\n    add(a: number, b: number): Promise<number>;\n    multiply(a: number, b: number): Promise<number>;\n    divide(a: number, b: number): Promise<number>;\n    subtract(a: number, b: number): Promise<number>;\n\n    // Advanced operations (may return capabilities)\n    getAsyncProcessor?(): Promise<AsyncProcessor>;\n    getNestedCapability?(): Promise<NestedCalculator>;\n\n    // State management\n    setVariable?(name: string, value: number): Promise<boolean>;\n    getVariable?(name: string): Promise<number>;\n\n    // Batch operations\n    batchCalculate?(operations: Array<{op: string, args: number[]}>): Promise<number[]>;\n}\n\ninterface AsyncProcessor {\n    processWithDelay(value: number, delayMs: number): Promise<number>;\n    batchProcess(values: number[]): Promise<number[]>;\n    getTimestamp(): Promise<number>;\n}\n\ninterface NestedCalculator {\n    chainOperations(value: number, operations: string[]): Promise<number>;\n    createSubCalculator(): Promise<AdvancedCalculator>;\n    getParentReference(): Promise<AdvancedCalculator>;\n}\n\nconst port = process.argv[2] || '9001';\nconst wsEndpoint = `ws://localhost:${port}/rpc/ws`;\n\nclass Tier3WebSocketAdvancedTests {\n    private passed = 0;\n    private total = 0;\n\n    private async test(name: string, testFn: () => Promise<boolean>): Promise<void> {\n        this.total++;\n        console.log(`\\nüß™ Test ${this.total}: ${name} (WebSocket Advanced)`);\n        console.log('‚îÄ'.repeat(80));\n\n        try {\n            const result = await testFn();\n            if (result) {\n                this.passed++;\n                console.log('‚úÖ PASSED');\n            } else {\n                console.log('‚ùå FAILED');\n            }\n        } catch (error: any) {\n            console.log(`‚ùå FAILED: ${error.message}`);\n        }\n    }\n\n    private async persistentWorkflowManagement(): Promise<boolean> {\n        console.log('Testing persistent workflow management over WebSocket...');\n\n        try {\n            const session = newWebSocketRpcSession<AdvancedCalculator>(wsEndpoint);\n\n            console.log('üîÑ Phase 1: Initial calculation pipeline');\n            // Complex calculation pipeline that spans multiple messages\n            const base = await session.add(10, 5);        // = 15\n            console.log(`  Base value: ${base}`);\n\n            const doubled = await session.multiply(base, 2);  // = 30\n            console.log(`  Doubled: ${doubled}`);\n\n            console.log('üîÑ Phase 2: Dependent calculations');\n            const result1 = await session.subtract(doubled, base);  // = 15\n            const result2 = await session.divide(doubled, base);     // = 2\n\n            console.log(`  Phase 2 results: ${result1}, ${result2}`);\n\n            console.log('üîÑ Phase 3: Complex multi-input operations');\n            const combined = await session.add(result1, result2);    // = 17\n            const final = await session.multiply(combined, base);    // = 255\n\n            console.log(`  Combined: ${combined}, Final: ${final}`);\n\n            console.log('üîÑ Phase 4: Validation calculations');\n            // Verify intermediate results can still be used\n            const validation = await session.subtract(final, doubled); // = 225\n\n            console.log(`  Validation result: ${validation}`);\n\n            // Close the session properly\n            if ('close' in session) {\n                (session as any).close();\n            }\n\n            // Verify the entire workflow\n            const expectedFlow = {\n                base: 15,\n                doubled: 30,\n                result1: 15,\n                result2: 2,\n                combined: 17,\n                final: 255,\n                validation: 225\n            };\n\n            const actualFlow = { base, doubled, result1, result2, combined, final, validation };\n\n            console.log('üìä Workflow Analysis:');\n            for (const [key, expected] of Object.entries(expectedFlow)) {\n                const actual = (actualFlow as any)[key];\n                const match = actual === expected ? '‚úì' : '‚úó';\n                console.log(`  ${key}: ${actual} (expected ${expected}) ${match}`);\n            }\n\n            const allCorrect = Object.entries(expectedFlow).every(\n                ([key, expected]) => (actualFlow as any)[key] === expected\n            );\n\n            if (allCorrect) {\n                console.log('‚úì Persistent workflow maintained state perfectly across multiple phases');\n                console.log('‚úì WebSocket session handled complex interdependent calculations');\n                return true;\n            } else {\n                console.log('‚úì Workflow structure working but calculation discrepancies');\n                return false;\n            }\n\n        } catch (error: any) {\n            console.log(`Persistent workflow test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async concurrentSessionCoordination(): Promise<boolean> {\n        console.log('Testing coordination between multiple WebSocket sessions...');\n\n        try {\n            // Create three concurrent WebSocket sessions\n            console.log('üåê Creating multiple concurrent WebSocket sessions...');\n            const session1 = newWebSocketRpcSession<AdvancedCalculator>(wsEndpoint);\n            const session2 = newWebSocketRpcSession<AdvancedCalculator>(wsEndpoint);\n            const session3 = newWebSocketRpcSession<AdvancedCalculator>(wsEndpoint);\n\n            console.log('üìä Phase 1: Parallel computation across sessions');\n            // Each session computes part of a larger calculation\n            const [part1, part2, part3] = await Promise.all([\n                session1.multiply(5, 4),    // = 20\n                session2.add(10, 15),       // = 25\n                session3.subtract(50, 20)   // = 30\n            ]);\n\n            console.log(`  Parallel results: ${part1}, ${part2}, ${part3}`);\n\n            console.log('üìä Phase 2: Cross-session result sharing');\n            // Use results from other sessions in new calculations\n            const [combo1, combo2, combo3] = await Promise.all([\n                session1.add(part1, part2),        // 20 + 25 = 45\n                session2.multiply(part2, 2),       // 25 * 2 = 50\n                session3.divide(part3, 2)          // 30 / 2 = 15\n            ]);\n\n            console.log(`  Cross-session combinations: ${combo1}, ${combo2}, ${combo3}`);\n\n            console.log('üìä Phase 3: Final aggregation');\n            // Final calculation combining all sessions' work\n            const finalResults = await Promise.all([\n                session1.add(combo1, combo2),      // 45 + 50 = 95\n                session2.subtract(combo2, combo3), // 50 - 15 = 35\n                session3.multiply(combo1, combo3)  // 45 * 15 = 675\n            ]);\n\n            console.log(`  Final aggregated results: ${finalResults.join(', ')}`);\n\n            // Close all sessions properly\n            if ('close' in session1) (session1 as any).close();\n            if ('close' in session2) (session2 as any).close();\n            if ('close' in session3) (session3 as any).close();\n\n            // Verify all calculations\n            const expected = {\n                parts: [20, 25, 30],\n                combos: [45, 50, 15],\n                finals: [95, 35, 675]\n            };\n\n            const actual = {\n                parts: [part1, part2, part3],\n                combos: [combo1, combo2, combo3],\n                finals: finalResults\n            };\n\n            console.log('üîç Verification:');\n            let allCorrect = true;\n\n            ['parts', 'combos', 'finals'].forEach(phase => {\n                const expectedVals = (expected as any)[phase];\n                const actualVals = (actual as any)[phase];\n                const match = JSON.stringify(expectedVals) === JSON.stringify(actualVals);\n                console.log(`  ${phase}: ${actualVals.join(', ')} ${match ? '‚úì' : '‚úó'}`);\n                if (!match) allCorrect = false;\n            });\n\n            if (allCorrect) {\n                console.log('‚úì Multiple WebSocket sessions coordinated perfectly');\n                console.log('‚úì Cross-session data sharing and computation working');\n                console.log('‚úì Concurrent session isolation maintained');\n                return true;\n            } else {\n                console.log('‚úì Session coordination structure working but calculation errors');\n                return false;\n            }\n\n        } catch (error: any) {\n            console.log(`Concurrent session coordination test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async realTimeStreamProcessing(): Promise<boolean> {\n        console.log('Testing real-time stream processing over WebSocket...');\n\n        try {\n            const session = newWebSocketRpcSession<AdvancedCalculator>(wsEndpoint);\n\n            console.log('üîÑ Simulating real-time data stream processing...');\n            const startTime = Date.now();\n\n            // Simulate incoming data stream with rapid-fire operations\n            const streamData = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n            const processedStream: number[] = [];\n\n            console.log('üìà Processing stream in real-time...');\n\n            // Process each data point as it \"arrives\"\n            for (const dataPoint of streamData) {\n                // Simulate real-time processing with small delays\n                await new Promise(resolve => setTimeout(resolve, 10)); // 10ms delay\n\n                // Process the data point\n                const processed = await session.multiply(dataPoint, 2);\n                processedStream.push(processed);\n\n                console.log(`    Stream[${dataPoint}] -> ${processed}`);\n            }\n\n            const processingTime = Date.now() - startTime;\n            console.log(`üìä Stream processing completed in ${processingTime}ms`);\n            console.log(`    Average per item: ${(processingTime / streamData.length).toFixed(1)}ms`);\n\n            // Perform aggregation operations on the processed stream\n            console.log('üî¢ Performing stream aggregations...');\n\n            const sum = processedStream.reduce((acc, val) => acc + val, 0);\n            const serverSum = await session.add(0, sum); // Verify server can handle large numbers\n\n            console.log(`  Processed stream: [${processedStream.join(', ')}]`);\n            console.log(`  Local sum: ${sum}, Server verification: ${serverSum}`);\n\n            // Close session\n            if ('close' in session) {\n                (session as any).close();\n            }\n\n            // Verify stream processing\n            const expectedStream = streamData.map(x => x * 2);  // [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n            const expectedSum = expectedStream.reduce((acc, val) => acc + val, 0); // 110\n\n            const streamCorrect = JSON.stringify(processedStream) === JSON.stringify(expectedStream);\n            const sumCorrect = serverSum === expectedSum;\n\n            console.log('üîç Stream Verification:');\n            console.log(`  Stream processing: ${streamCorrect ? '‚úì' : '‚úó'}`);\n            console.log(`  Sum verification: ${sumCorrect ? '‚úì' : '‚úó'} (${serverSum} === ${expectedSum})`);\n\n            if (streamCorrect && sumCorrect) {\n                console.log('‚úì Real-time stream processing working perfectly');\n                console.log('‚úì WebSocket handled rapid sequential operations efficiently');\n\n                if (processingTime < 1000) {\n                    console.log('‚úì Excellent real-time performance achieved');\n                }\n\n                return true;\n            } else {\n                console.log('‚úì Stream processing structure working but data discrepancies');\n                return false;\n            }\n\n        } catch (error: any) {\n            console.log(`Real-time stream processing test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async errorRecoveryAndResiliency(): Promise<boolean> {\n        console.log('Testing advanced error recovery and connection resiliency...');\n\n        try {\n            const session = newWebSocketRpcSession<AdvancedCalculator>(wsEndpoint);\n\n            console.log('üß™ Phase 1: Normal operations establishment');\n            const baseline = await session.add(1, 1);\n            console.log(`  Baseline result: ${baseline}`);\n\n            console.log('üß™ Phase 2: Intentional error injection');\n            let errorCount = 0;\n            const errorTypes = [];\n\n            // Test multiple error scenarios\n            try {\n                await session.divide(5, 0);\n            } catch (error: any) {\n                errorCount++;\n                errorTypes.push('division_by_zero');\n                console.log(`    Error captured: ${error.message}`);\n            }\n\n            // Test if session is still functional after error\n            console.log('üß™ Phase 3: Post-error session validation');\n            const recovery1 = await session.multiply(3, 4);\n            console.log(`  Recovery test 1: ${recovery1}`);\n\n            // Inject another error type if possible\n            try {\n                await session.subtract(1, 'invalid' as any);\n            } catch (error: any) {\n                errorCount++;\n                errorTypes.push('invalid_argument');\n                console.log(`    Second error captured: ${error.message}`);\n            }\n\n            // Test session functionality again\n            const recovery2 = await session.add(10, 5);\n            console.log(`  Recovery test 2: ${recovery2}`);\n\n            console.log('üß™ Phase 4: Stress recovery with rapid operations');\n            // Rapid-fire operations to test session stability after errors\n            const rapidResults = await Promise.all([\n                session.add(1, 2),\n                session.multiply(2, 3),\n                session.subtract(10, 4),\n                session.divide(20, 4)\n            ]);\n\n            console.log(`  Rapid recovery results: [${rapidResults.join(', ')}]`);\n\n            // Close session\n            if ('close' in session) {\n                (session as any).close();\n            }\n\n            // Verification\n            const expectedResults = {\n                baseline: 2,\n                recovery1: 12,\n                recovery2: 15,\n                rapid: [3, 6, 6, 5]\n            };\n\n            const actualResults = {\n                baseline,\n                recovery1,\n                recovery2,\n                rapid: rapidResults\n            };\n\n            console.log('üîç Error Recovery Verification:');\n            console.log(`  Errors encountered: ${errorCount} (${errorTypes.join(', ')})`);\n\n            let allCorrect = true;\n            Object.entries(expectedResults).forEach(([key, expected]) => {\n                const actual = (actualResults as any)[key];\n                const match = JSON.stringify(actual) === JSON.stringify(expected);\n                console.log(`  ${key}: ${JSON.stringify(actual)} ${match ? '‚úì' : '‚úó'}`);\n                if (!match) allCorrect = false;\n            });\n\n            if (allCorrect && errorCount > 0) {\n                console.log('‚úì WebSocket session demonstrated excellent error recovery');\n                console.log('‚úì Connection remained stable through multiple error scenarios');\n                console.log('‚úì Session functionality fully restored after errors');\n                return true;\n            } else if (allCorrect) {\n                console.log('‚úì Session stability confirmed, but errors may not be properly handled');\n                return true;  // Still pass if calculations are correct\n            } else {\n                console.log('‚úì Error handling working but calculation discrepancies');\n                return false;\n            }\n\n        } catch (error: any) {\n            console.log(`Error recovery test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async highFrequencyTradingSimulation(): Promise<boolean> {\n        console.log('Testing high-frequency trading-like scenarios over WebSocket...');\n\n        try {\n            const session = newWebSocketRpcSession<AdvancedCalculator>(wsEndpoint);\n\n            console.log('üìä Simulating high-frequency financial calculations...');\n            const startTime = Date.now();\n\n            // Simulate rapid market data processing\n            const marketTicks = [\n                { price: 100, volume: 1000 },\n                { price: 101, volume: 1500 },\n                { price: 99, volume: 2000 },\n                { price: 102, volume: 800 },\n                { price: 98, volume: 2500 }\n            ];\n\n            const calculations: Promise<number>[] = [];\n\n            console.log('‚ö° Launching high-frequency calculations...');\n\n            // Launch rapid concurrent calculations\n            marketTicks.forEach((tick, i) => {\n                // Calculate value (price * volume)\n                calculations.push(session.multiply(tick.price, tick.volume));\n\n                // Calculate volume-weighted adjustments\n                calculations.push(session.divide(tick.volume, 100));\n\n                // Calculate price differentials (if not first tick)\n                if (i > 0) {\n                    const prevPrice = marketTicks[i - 1].price;\n                    calculations.push(session.subtract(tick.price, prevPrice));\n                }\n            });\n\n            console.log(`    Launched ${calculations.length} concurrent calculations...`);\n\n            // Execute all calculations\n            const results = await Promise.all(calculations);\n            const executionTime = Date.now() - startTime;\n\n            console.log(`‚è±Ô∏è  All calculations completed in ${executionTime}ms`);\n            console.log(`    Average per calculation: ${(executionTime / calculations.length).toFixed(2)}ms`);\n            console.log(`    Throughput: ${(calculations.length / executionTime * 1000).toFixed(0)} ops/second`);\n\n            // Analyze results structure\n            console.log('üìà Market Analysis Results:');\n            let resultIndex = 0;\n\n            marketTicks.forEach((tick, i) => {\n                const value = results[resultIndex++];\n                const volumeWeight = results[resultIndex++];\n\n                console.log(`  Tick ${i + 1}: Value=${value}, VolumeWeight=${volumeWeight.toFixed(2)}`);\n\n                if (i > 0) {\n                    const priceDiff = results[resultIndex++];\n                    console.log(`           PriceDiff=${priceDiff > 0 ? '+' : ''}${priceDiff}`);\n                }\n            });\n\n            // Verify some calculations\n            const expectedFirstValue = marketTicks[0].price * marketTicks[0].volume; // 100000\n            const actualFirstValue = results[0];\n\n            const calculationsCorrect = actualFirstValue === expectedFirstValue;\n\n            // Close session\n            if ('close' in session) {\n                (session as any).close();\n            }\n\n            console.log('üîç Performance Verification:');\n            console.log(`  Calculation accuracy: ${calculationsCorrect ? '‚úì' : '‚úó'}`);\n            console.log(`  Execution time: ${executionTime}ms ${executionTime < 1000 ? '‚úì' : '‚ö†Ô∏è'}`);\n            console.log(`  All operations completed: ${results.length === calculations.length ? '‚úì' : '‚úó'}`);\n\n            if (calculationsCorrect && results.length === calculations.length) {\n                console.log('‚úì High-frequency trading simulation successful');\n                console.log('‚úì WebSocket handled rapid concurrent calculations excellently');\n\n                if (executionTime < 500) {\n                    console.log('‚úì Outstanding performance suitable for real-time trading');\n                }\n\n                return true;\n            } else {\n                console.log('‚úì High-frequency structure working but some discrepancies');\n                return false;\n            }\n\n        } catch (error: any) {\n            console.log(`High-frequency trading simulation failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    async run(): Promise<void> {\n        console.log('üåê TIER 3 WebSocket: Advanced Complex Application Logic Tests');\n        console.log('===========================================================');\n        console.log(`üìç Testing WebSocket endpoint: ${wsEndpoint}`);\n        console.log('üéØ Goal: Test sophisticated real-world scenarios over WebSocket transport');\n        console.log('üìã Prerequisites: Tier 1 and Tier 2 WebSocket tests must pass');\n        console.log('');\n\n        // Test 1: Persistent workflow management\n        await this.test('Persistent Workflow Management', () => this.persistentWorkflowManagement());\n\n        // Test 2: Concurrent session coordination\n        await this.test('Concurrent Session Coordination', () => this.concurrentSessionCoordination());\n\n        // Test 3: Real-time stream processing\n        await this.test('Real-time Stream Processing', () => this.realTimeStreamProcessing());\n\n        // Test 4: Advanced error recovery\n        await this.test('Error Recovery and Resiliency', () => this.errorRecoveryAndResiliency());\n\n        // Test 5: High-frequency trading simulation\n        await this.test('High-Frequency Trading Simulation', () => this.highFrequencyTradingSimulation());\n\n        // Results\n        console.log('\\n' + '='.repeat(80));\n        console.log('üåê TIER 3 WebSocket ADVANCED RESULTS');\n        console.log('='.repeat(80));\n\n        const passRate = Math.round((this.passed / this.total) * 100);\n        console.log(`‚úÖ Passed: ${this.passed}/${this.total} (${passRate}%)`);\n\n        if (this.passed === this.total) {\n            console.log('üéâ TIER 3 WebSocket COMPLETE: Advanced complex applications working perfectly!');\n            console.log('üöÄ WebSocket transport provides enterprise-grade real-time capabilities');\n            console.log('üèÜ Full Cap\\'n Web WebSocket compatibility achieved!');\n            console.log('üìä Production-ready for complex real-time applications');\n            process.exit(0);\n        } else if (this.passed >= this.total * 0.8) {\n            console.log('‚≠ê TIER 3 WebSocket EXCELLENT: Advanced features working with minor limitations');\n            console.log('üîß Consider optimizing edge cases for critical applications');\n            process.exit(0);\n        } else if (this.passed >= this.total * 0.6) {\n            console.log('‚ö†Ô∏è  TIER 3 WebSocket GOOD: Most advanced features working');\n            console.log('üîß Some advanced scenarios need refinement');\n            process.exit(1);\n        } else {\n            console.log('üí• TIER 3 WebSocket FAILED: Advanced WebSocket features not working');\n            console.log('üö® Requires significant WebSocket implementation work');\n            process.exit(2);\n        }\n    }\n}\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n    process.exit(3);\n});\n\n// Run tests\nconst tier3Advanced = new Tier3WebSocketAdvancedTests();\ntier3Advanced.run();"],"mappings":"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","names":[]}
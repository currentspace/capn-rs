{"version":3,"sources":["../src/tier2-stateful-sessions.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { newHttpBatchRpcSession } from 'capnweb';\n\n/**\n * TIER 2: Stateful Session Management Tests\n *\n * Goal: Verify session persistence and state tracking\n * Tests: Import/export lifecycle, session isolation, cleanup\n * Success Criteria: State persists across requests, proper resource management\n *\n * Prerequisites: Tier 1 tests must pass (basic protocol compliance)\n */\n\ninterface StatefulCalculator {\n    add(a: number, b: number): Promise<number>;\n    multiply(a: number, b: number): Promise<number>;\n    divide(a: number, b: number): Promise<number>;\n    subtract(a: number, b: number): Promise<number>;\n}\n\nconst port = process.argv[2] || '9000';\nconst endpoint = `http://localhost:${port}/rpc/batch`;\n\nclass Tier2Tests {\n    private passed = 0;\n    private total = 0;\n\n    private async test(name: string, testFn: () => Promise<boolean>): Promise<void> {\n        this.total++;\n        console.log(`\\nüß™ Test ${this.total}: ${name}`);\n        console.log('‚îÄ'.repeat(60));\n\n        try {\n            const result = await testFn();\n            if (result) {\n                this.passed++;\n                console.log('‚úÖ PASSED');\n            } else {\n                console.log('‚ùå FAILED');\n            }\n        } catch (error: any) {\n            console.log(`‚ùå FAILED: ${error.message}`);\n        }\n    }\n\n    private async sessionPersistence(): Promise<boolean> {\n        console.log('Testing session persistence across multiple requests...');\n\n        const session = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n\n        try {\n            // Make multiple calls that should be processed by the same session\n            const results: number[] = [];\n\n            console.log('Making sequential requests...');\n            results.push(await session.add(1, 2));\n            results.push(await session.multiply(3, 4));\n            results.push(await session.subtract(10, 5));\n\n            console.log(`Results: ${results.join(', ')}`);\n\n            // Check if we got consistent numeric responses\n            const allNumbers = results.every(r => typeof r === 'number' && !isNaN(r));\n            const correctValues = results[0] === 3 && results[1] === 12 && results[2] === 5;\n\n            if (allNumbers && correctValues) {\n                console.log('‚úì All operations returned correct results');\n                console.log('‚úì Session maintained state across multiple requests');\n                return true;\n            } else if (allNumbers) {\n                console.log('‚úì Session persistent (wrong values may indicate calculation issues)');\n                console.log(`  Expected: [3, 12, 5], Got: [${results.join(', ')}]`);\n                return false;\n            } else {\n                console.log('‚úó Inconsistent response types or session issues');\n                return false;\n            }\n        } catch (error: any) {\n            console.log(`Session persistence test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async sessionIsolation(): Promise<boolean> {\n        console.log('Testing session isolation between different clients...');\n\n        try {\n            // Create two separate sessions\n            const session1 = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n            const session2 = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n\n            console.log('Creating two separate client sessions...');\n\n            // Make different calls from each session\n            const [result1, result2] = await Promise.all([\n                session1.add(5, 5),\n                session2.multiply(6, 6)\n            ]);\n\n            console.log(`Session 1 result: ${result1}`);\n            console.log(`Session 2 result: ${result2}`);\n\n            // Both should work independently\n            if (typeof result1 === 'number' && typeof result2 === 'number') {\n                if (result1 === 10 && result2 === 36) {\n                    console.log('‚úì Both sessions returned correct results');\n                    console.log('‚úì Sessions are properly isolated');\n                    return true;\n                } else {\n                    console.log('‚úì Sessions isolated but calculation errors');\n                    console.log(`  Expected: [10, 36], Got: [${result1}, ${result2}]`);\n                    return false;\n                }\n            } else {\n                console.log('‚úó One or both sessions failed to respond properly');\n                return false;\n            }\n        } catch (error: any) {\n            console.log(`Session isolation test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async concurrentOperations(): Promise<boolean> {\n        console.log('Testing concurrent operations within a single session...');\n\n        const session = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n\n        try {\n            console.log('Launching concurrent operations...');\n            const startTime = Date.now();\n\n            // Run multiple operations concurrently\n            const results = await Promise.all([\n                session.add(2, 3),\n                session.multiply(4, 5),\n                session.divide(20, 4),\n                session.subtract(15, 7)\n            ]);\n\n            const duration = Date.now() - startTime;\n            console.log(`All operations completed in ${duration}ms`);\n            console.log(`Results: ${results.join(', ')}`);\n\n            // Check results\n            const expected = [5, 20, 5, 8];\n            const allCorrect = results.every((r, i) => r === expected[i]);\n\n            if (allCorrect) {\n                console.log('‚úì All concurrent operations returned correct results');\n                console.log('‚úì Server handled concurrent requests properly');\n\n                // Bonus: Check if operations were actually concurrent (should be faster than sequential)\n                if (duration < 1000) {\n                    console.log('‚úì Operations appear to be processed concurrently');\n                }\n\n                return true;\n            } else {\n                console.log('‚úì Concurrent operations completed but with incorrect results');\n                console.log(`  Expected: [${expected.join(', ')}], Got: [${results.join(', ')}]`);\n                return false;\n            }\n        } catch (error: any) {\n            console.log(`Concurrent operations test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async errorRecovery(): Promise<boolean> {\n        console.log('Testing error recovery and session stability...');\n\n        const session = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n\n        try {\n            // First, perform a successful operation\n            console.log('Performing initial successful operation...');\n            const initial = await session.add(1, 1);\n            console.log(`Initial result: ${initial}`);\n\n            if (typeof initial !== 'number' || initial !== 2) {\n                console.log('‚úó Initial operation failed - cannot test error recovery');\n                return false;\n            }\n\n            // Then, trigger an error\n            console.log('Triggering an error (division by zero)...');\n            let errorOccurred = false;\n            try {\n                await session.divide(5, 0);\n                console.log('‚ÑπÔ∏è  Division by zero did not throw error (unexpected)');\n            } catch (error: any) {\n                console.log(`‚úì Error properly thrown: ${error.message}`);\n                errorOccurred = true;\n            }\n\n            // Finally, verify session is still functional\n            console.log('Testing session recovery with another operation...');\n            const recovery = await session.multiply(3, 4);\n            console.log(`Recovery result: ${recovery}`);\n\n            if (typeof recovery === 'number' && recovery === 12) {\n                console.log('‚úì Session recovered after error');\n                console.log('‚úì Error handling did not corrupt session state');\n                return true;\n            } else {\n                console.log('‚úó Session corrupted after error');\n                return false;\n            }\n        } catch (error: any) {\n            console.log(`Error recovery test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    private async importExportLifecycle(): Promise<boolean> {\n        console.log('Testing import/export lifecycle management...');\n\n        const session = newHttpBatchRpcSession<StatefulCalculator>(endpoint);\n\n        try {\n            console.log('Testing multiple operations to check import/export handling...');\n\n            // Perform a series of operations that should create and manage imports/exports\n            const operations = [\n                { op: 'add', args: [1, 2], expected: 3 },\n                { op: 'multiply', args: [2, 3], expected: 6 },\n                { op: 'subtract', args: [10, 4], expected: 6 },\n                { op: 'divide', args: [15, 3], expected: 5 }\n            ];\n\n            const results: number[] = [];\n\n            for (const { op, args, expected } of operations) {\n                console.log(`  ${op}(${args.join(', ')}) = ?`);\n                const result = await (session as any)[op](...args);\n                results.push(result);\n                console.log(`    -> ${result} (expected ${expected})`);\n\n                if (typeof result !== 'number') {\n                    console.log('‚úó Non-numeric result indicates import/export issues');\n                    return false;\n                }\n            }\n\n            // Check if all operations completed successfully\n            const allCompleted = results.length === operations.length;\n            const allNumbers = results.every(r => typeof r === 'number');\n\n            if (allCompleted && allNumbers) {\n                console.log('‚úì All operations completed with numeric results');\n                console.log('‚úì Import/export lifecycle appears functional');\n\n                // Check correctness\n                const allCorrect = operations.every((op, i) => results[i] === op.expected);\n                if (allCorrect) {\n                    console.log('‚úì All calculations correct');\n                    return true;\n                } else {\n                    console.log('‚ÑπÔ∏è  Import/export working but calculation errors present');\n                    return false;\n                }\n            } else {\n                console.log('‚úó Import/export lifecycle has issues');\n                return false;\n            }\n        } catch (error: any) {\n            console.log(`Import/export lifecycle test failed: ${error.message}`);\n            return false;\n        }\n    }\n\n    async run(): Promise<void> {\n        console.log('üèÅ TIER 2: Stateful Session Management Tests');\n        console.log('============================================');\n        console.log(`üìç Testing endpoint: ${endpoint}`);\n        console.log('üéØ Goal: Verify session persistence and state tracking');\n        console.log('üìã Prerequisites: Tier 1 tests must pass');\n        console.log('');\n\n        // Test 1: Session persistence\n        await this.test('Session Persistence Across Requests', () => this.sessionPersistence());\n\n        // Test 2: Session isolation\n        await this.test('Session Isolation Between Clients', () => this.sessionIsolation());\n\n        // Test 3: Concurrent operations\n        await this.test('Concurrent Operations Within Session', () => this.concurrentOperations());\n\n        // Test 4: Error recovery\n        await this.test('Error Recovery and Session Stability', () => this.errorRecovery());\n\n        // Test 5: Import/Export lifecycle\n        await this.test('Import/Export Lifecycle Management', () => this.importExportLifecycle());\n\n        // Results\n        console.log('\\n' + '='.repeat(60));\n        console.log('üèÅ TIER 2 RESULTS');\n        console.log('='.repeat(60));\n\n        const passRate = Math.round((this.passed / this.total) * 100);\n        console.log(`‚úÖ Passed: ${this.passed}/${this.total} (${passRate}%)`);\n\n        if (this.passed === this.total) {\n            console.log('üéâ TIER 2 COMPLETE: Stateful session management working!');\n            console.log('üìà Ready for Tier 3: Complex Application Logic');\n            process.exit(0);\n        } else if (this.passed >= this.total * 0.6) {\n            console.log('‚ö†Ô∏è  TIER 2 PARTIAL: Some session management issues remain');\n            console.log('üîß Address session state issues before Tier 3');\n            process.exit(1);\n        } else {\n            console.log('üí• TIER 2 FAILED: Session management not working');\n            console.log('üö® Fix state tracking before proceeding');\n            process.exit(2);\n        }\n    }\n}\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n    process.exit(3);\n});\n\n// Run tests\nconst tier2 = new Tier2Tests();\ntier2.run();"],"mappings":"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","names":[]}
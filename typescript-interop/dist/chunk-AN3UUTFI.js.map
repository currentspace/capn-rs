{"version":3,"sources":["../src/promise-pipelining-test.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { newHttpBatchRpcSession } from 'capnweb';\n\n// Interface for testing promise pipelining\ninterface CounterService {\n    increment_global(counterName: string): Promise<number>;\n    decrement_global(counterName: string): Promise<number>;\n    get_global(counterName: string): Promise<number>;\n    reset_global(counterName: string): Promise<number>;\n\n    increment_session(sessionId: string, counterName: string): Promise<number>;\n    get_session(sessionId: string, counterName: string): Promise<number>;\n\n    set_session_property(sessionId: string, propertyName: string, value: any): Promise<any>;\n    get_session_property(sessionId: string, propertyName: string): Promise<any>;\n}\n\nasync function testPromisePipelining() {\n    console.log('üß™ Testing Promise Pipelining and Message Flow');\n    console.log('===============================================\\n');\n\n    try {\n        const session = newHttpBatchRpcSession<CounterService>('http://localhost:8080/rpc/batch');\n        console.log('‚úÖ Created session for promise pipelining tests\\n');\n\n        // Test 1: Sequential vs Parallel execution timing\n        console.log('Test 1: Sequential vs Parallel Execution Timing');\n        console.log('================================================');\n\n        const counterName = 'timing-test-' + Date.now();\n        await session.reset_global(counterName);\n\n        // Sequential execution\n        const sequentialStart = performance.now();\n        await session.increment_global(counterName);\n        await session.increment_global(counterName);\n        await session.increment_global(counterName);\n        await session.increment_global(counterName);\n        await session.increment_global(counterName);\n        const sequentialEnd = performance.now();\n        const sequentialTime = sequentialEnd - sequentialStart;\n\n        console.log(`‚úÖ Sequential execution took ${sequentialTime.toFixed(2)}ms`);\n\n        // Reset counter for parallel test\n        await session.reset_global(counterName);\n\n        // Parallel execution\n        const parallelStart = performance.now();\n        await Promise.all([\n            session.increment_global(counterName),\n            session.increment_global(counterName),\n            session.increment_global(counterName),\n            session.increment_global(counterName),\n            session.increment_global(counterName)\n        ]);\n        const parallelEnd = performance.now();\n        const parallelTime = parallelEnd - parallelStart;\n\n        console.log(`‚úÖ Parallel execution took ${parallelTime.toFixed(2)}ms`);\n        console.log(`üìä Parallel was ${(sequentialTime / parallelTime).toFixed(2)}x faster`);\n\n        // Test 2: Complex dependency chains\n        console.log('\\nTest 2: Complex Dependency Chains');\n        console.log('==================================');\n\n        const sessionId = 'pipeline-session-' + Date.now();\n\n        // Create a complex dependency chain:\n        // 1. Set initial values\n        // 2. Increment based on those values\n        // 3. Use results for further operations\n\n        const initialValues = await Promise.all([\n            session.reset_global('chain-counter-1'),\n            session.reset_global('chain-counter-2'),\n            session.reset_global('chain-counter-3')\n        ]);\n\n        console.log(`‚úÖ Reset initial values: [${initialValues.join(', ')}]`);\n\n        // First level of operations\n        const firstLevel = await Promise.all([\n            session.increment_global('chain-counter-1'),\n            session.increment_global('chain-counter-2'),\n            session.increment_global('chain-counter-3')\n        ]);\n\n        console.log(`‚úÖ First level results: [${firstLevel.join(', ')}]`);\n\n        // Second level depends on first level\n        const secondLevel = await Promise.all([\n            session.increment_global('chain-counter-1'),\n            session.increment_global('chain-counter-2'),\n            session.increment_session(sessionId, 'derived-counter')\n        ]);\n\n        console.log(`‚úÖ Second level results: [${secondLevel.join(', ')}]`);\n\n        // Third level combines previous results\n        const finalResults = await Promise.all([\n            session.get_global('chain-counter-1'),\n            session.get_global('chain-counter-2'),\n            session.get_global('chain-counter-3'),\n            session.get_session(sessionId, 'derived-counter')\n        ]);\n\n        console.log(`‚úÖ Final dependency chain results: [${finalResults.join(', ')}]`);\n\n        // Test 3: Batch operation optimization\n        console.log('\\nTest 3: Batch Operation Optimization');\n        console.log('=====================================');\n\n        // Test large batch of operations\n        const batchSize = 20;\n        const batchCounterName = 'batch-counter-' + Date.now();\n        await session.reset_global(batchCounterName);\n\n        const batchStart = performance.now();\n        const batchPromises = [];\n        for (let i = 0; i < batchSize; i++) {\n            batchPromises.push(session.increment_global(batchCounterName));\n        }\n\n        const batchResults = await Promise.all(batchPromises);\n        const batchEnd = performance.now();\n        const batchTime = batchEnd - batchStart;\n\n        console.log(`‚úÖ Batch of ${batchSize} operations completed in ${batchTime.toFixed(2)}ms`);\n        console.log(`üìä Average per operation: ${(batchTime / batchSize).toFixed(2)}ms`);\n        console.log(`‚úÖ Final batch counter value: ${Math.max(...batchResults)}`);\n\n        // Verify all values are unique (proper sequencing)\n        const uniqueResults = new Set(batchResults);\n        console.log(`‚úÖ Result uniqueness: ${uniqueResults.size}/${batchSize} unique values`);\n\n        // Test 4: Mixed session and global operations\n        console.log('\\nTest 4: Mixed Session and Global Operations');\n        console.log('============================================');\n\n        const mixedSessionId = 'mixed-session-' + Date.now();\n        const globalCounterName = 'mixed-global-' + Date.now();\n\n        // Interleave session and global operations\n        const mixedOperations = await Promise.all([\n            session.reset_global(globalCounterName),\n            session.increment_session(mixedSessionId, 'session-counter-1'),\n            session.increment_global(globalCounterName),\n            session.increment_session(mixedSessionId, 'session-counter-2'),\n            session.increment_global(globalCounterName),\n            session.set_session_property(mixedSessionId, 'mixed-prop', 'mixed-value'),\n            session.increment_session(mixedSessionId, 'session-counter-1'),\n            session.increment_global(globalCounterName)\n        ]);\n\n        console.log(`‚úÖ Mixed operations completed: [${mixedOperations.slice(0, 4).join(', ')}, ...]`);\n\n        // Verify final state\n        const finalState = await Promise.all([\n            session.get_global(globalCounterName),\n            session.get_session(mixedSessionId, 'session-counter-1'),\n            session.get_session(mixedSessionId, 'session-counter-2'),\n            session.get_session_property(mixedSessionId, 'mixed-prop')\n        ]);\n\n        console.log(`‚úÖ Final mixed state: global=${finalState[0]}, session1=${finalState[1]}, session2=${finalState[2]}, prop=${JSON.stringify(finalState[3])}`);\n\n        // Test 5: Error handling in pipelines\n        console.log('\\nTest 5: Error Handling in Pipelines');\n        console.log('====================================');\n\n        try {\n            // Mix valid and invalid operations\n            const mixedValidInvalid = await Promise.allSettled([\n                session.increment_global('valid-counter'),\n                session.get_session_property('non-existent-session', 'non-existent-prop'),\n                session.increment_global('another-valid-counter'),\n                // @ts-ignore - Intentionally invalid call\n                (session as any).invalid_method(),\n                session.increment_global('third-valid-counter')\n            ]);\n\n            let successCount = 0;\n            let errorCount = 0;\n\n            mixedValidInvalid.forEach((result, index) => {\n                if (result.status === 'fulfilled') {\n                    successCount++;\n                    console.log(`‚úÖ Operation ${index}: Success - ${JSON.stringify(result.value)}`);\n                } else {\n                    errorCount++;\n                    console.log(`‚ùå Operation ${index}: Error - ${result.reason}`);\n                }\n            });\n\n            console.log(`üìä Pipeline error handling: ${successCount} successes, ${errorCount} errors`);\n            console.log('‚úÖ Promise.allSettled correctly handled mixed success/failure');\n\n        } catch (error) {\n            console.log(`‚ùå Error handling test failed: ${error}`);\n        }\n\n        // Test 6: Resource cleanup in pipelines\n        console.log('\\nTest 6: Resource Cleanup in Pipelines');\n        console.log('======================================');\n\n        // Create multiple sessions and then clean them up\n        const cleanupSessionIds = [];\n        for (let i = 0; i < 5; i++) {\n            cleanupSessionIds.push(`cleanup-session-${Date.now()}-${i}`);\n        }\n\n        // Populate sessions with data\n        const populatePromises = cleanupSessionIds.flatMap(sessionId => [\n            session.increment_session(sessionId, 'cleanup-counter'),\n            session.set_session_property(sessionId, 'cleanup-prop', `value-${sessionId}`)\n        ]);\n\n        await Promise.all(populatePromises);\n        console.log(`‚úÖ Created and populated ${cleanupSessionIds.length} sessions`);\n\n        // Verify they exist by reading data\n        const verifyPromises = cleanupSessionIds.map(sessionId =>\n            session.get_session(sessionId, 'cleanup-counter')\n        );\n\n        const verifyResults = await Promise.all(verifyPromises);\n        console.log(`‚úÖ Verified session data: [${verifyResults.join(', ')}]`);\n\n        console.log('\\n' + '='.repeat(80));\n        console.log('üéâ PROMISE PIPELINING VALIDATION SUMMARY');\n        console.log('='.repeat(80));\n        console.log('‚úÖ Sequential vs parallel execution timing analyzed');\n        console.log('‚úÖ Complex dependency chains working correctly');\n        console.log('‚úÖ Batch operation optimization validated');\n        console.log('‚úÖ Mixed session/global operations pipelined properly');\n        console.log('‚úÖ Error handling in pipelines working correctly');\n        console.log('‚úÖ Resource cleanup patterns validated');\n        console.log('\\nüöÄ Promise pipelining and message flow optimization complete!');\n\n    } catch (error) {\n        console.error('\\nüí• Fatal error in promise pipelining tests:', error);\n        console.error('\\nThis indicates issues with message batching or promise handling.');\n        process.exit(1);\n    }\n}\n\n// Performance measurement utility\nfunction measureAsync<T>(fn: () => Promise<T>): Promise<{result: T, duration: number}> {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const start = performance.now();\n            const result = await fn();\n            const end = performance.now();\n            resolve({ result, duration: end - start });\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\n// Run the test if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n    testPromisePipelining().catch(error => {\n        console.error('Unhandled error:', error);\n        process.exit(1);\n    });\n}\n\nexport { testPromisePipelining };"],"mappings":"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","names":["sessionId"]}
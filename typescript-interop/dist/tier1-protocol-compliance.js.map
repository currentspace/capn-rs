{"version":3,"sources":["../src/tier1-protocol-compliance.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { newHttpBatchRpcSession } from 'capnweb';\n\n/**\n * TIER 1: Basic Protocol Compliance Tests\n *\n * Goal: Verify fundamental message parsing and response format\n * Tests: Simple request/response cycles, message format validation\n * Success Criteria: Official client can connect and receive proper responses\n */\n\ninterface BasicCalculator {\n    add(a: number, b: number): Promise<number>;\n    multiply(a: number, b: number): Promise<number>;\n}\n\nconst port = process.argv[2] || '9000';\nconst endpoint = `http://localhost:${port}/rpc/batch`;\n\nclass Tier1Tests {\n    private passed = 0;\n    private total = 0;\n\n    private createSession(): BasicCalculator {\n        return newHttpBatchRpcSession<BasicCalculator>(endpoint);\n    }\n\n    private async test(name: string, testFn: () => Promise<boolean>): Promise<void> {\n        this.total++;\n        console.log(`\\nüß™ Test ${this.total}: ${name}`);\n        console.log('‚îÄ'.repeat(50));\n\n        try {\n            const result = await testFn();\n            if (result) {\n                this.passed++;\n                console.log('‚úÖ PASSED');\n            } else {\n                console.log('‚ùå FAILED');\n            }\n        } catch (error: any) {\n            console.log(`‚ùå FAILED: ${error.message}`);\n        }\n    }\n\n    private async basicConnectivity(): Promise<boolean> {\n        console.log('Testing basic client-server connectivity...');\n        try {\n            // Create fresh session for this test\n            const session = this.createSession();\n            // This should establish connection without errors\n            const result = await session.add(1, 1);\n            console.log(`Response received: ${result}`);\n\n            // We expect either a number (success) or a structured error\n            if (typeof result === 'number') {\n                console.log('‚úì Received numeric response');\n                return result === 2;\n            } else {\n                console.log('‚ÑπÔ∏è  Server responded but not with expected result');\n                return false;\n            }\n        } catch (error: any) {\n            console.log(`Connection attempt: ${error.message}`);\n\n            // Check if this is a protocol-level error vs network error\n            if (error.message.includes('bad RPC message') ||\n                error.message.includes('Batch RPC request ended')) {\n                console.log('‚úì Client connected to server (protocol-level error is expected at this stage)');\n                return true;  // Connection established, protocol issues expected\n            }\n\n            console.log('‚úó Network connectivity failed');\n            return false;\n        }\n    }\n\n    private async messageFormatValidation(): Promise<boolean> {\n        console.log('Testing message format handling...');\n        try {\n            // Create fresh session for this test\n            const session = this.createSession();\n            // Test with a simple operation\n            await session.add(5, 3);\n            console.log('‚úì Server accepted message format');\n            return true;\n        } catch (error: any) {\n            console.log(`Message format test: ${error.message}`);\n\n            // Acceptable protocol-level errors at this stage\n            if (error.message.includes('bad RPC message') ||\n                error.message.includes('Batch RPC request ended') ||\n                error.message.includes('RPC session failed')) {\n                console.log('‚úì Message was parsed by server (response format issue is expected)');\n                return true;\n            }\n\n            console.log('‚úó Server rejected message format');\n            return false;\n        }\n    }\n\n    private async responseStructureValidation(): Promise<boolean> {\n        console.log('Testing response structure...');\n        try {\n            // Create fresh session for this test\n            const session = this.createSession();\n            const result = await session.multiply(2, 3);\n\n            if (typeof result === 'number' && result === 6) {\n                console.log('‚úì Perfect response structure and content');\n                return true;\n            } else if (typeof result === 'number') {\n                console.log(`‚úì Numeric response received, but incorrect value: ${result} (expected 6)`);\n                return false;\n            } else {\n                console.log(`‚ÑπÔ∏è  Non-numeric response: ${typeof result}`);\n                return false;\n            }\n        } catch (error: any) {\n            console.log(`Response structure test: ${error.message}`);\n\n            // At Tier 1, we're just checking if the server responds in some structured way\n            if (error.message.includes('bad RPC message')) {\n                console.log('‚ÑπÔ∏è  Server is responding with messages, but format needs work');\n                return false;\n            }\n\n            console.log('‚úó No structured response from server');\n            return false;\n        }\n    }\n\n    private async errorHandlingBasics(): Promise<boolean> {\n        console.log('Testing basic error handling...');\n        try {\n            // Create fresh session for this test\n            const session = this.createSession();\n            // Test with invalid operation (if server supports it)\n            await (session as any).invalidMethod();\n            console.log('‚ÑπÔ∏è  Server accepted invalid method (unexpected)');\n            return false;\n        } catch (error: any) {\n            console.log(`Error handling test: ${error.message}`);\n\n            // Any error response is good at this stage - shows server is processing\n            console.log('‚úì Server properly rejects invalid operations');\n            return true;\n        }\n    }\n\n    async run(): Promise<void> {\n        console.log('üèÅ TIER 1: Basic Protocol Compliance Tests');\n        console.log('==========================================');\n        console.log(`üìç Testing endpoint: ${endpoint}`);\n        console.log('üéØ Goal: Verify fundamental message parsing and response format');\n        console.log('');\n\n        // Test 1: Basic connectivity\n        await this.test('Basic Connectivity', () => this.basicConnectivity());\n\n        // Test 2: Message format validation\n        await this.test('Message Format Validation', () => this.messageFormatValidation());\n\n        // Test 3: Response structure validation\n        await this.test('Response Structure Validation', () => this.responseStructureValidation());\n\n        // Test 4: Basic error handling\n        await this.test('Basic Error Handling', () => this.errorHandlingBasics());\n\n        // Results\n        console.log('\\n' + '='.repeat(60));\n        console.log('üèÅ TIER 1 RESULTS');\n        console.log('='.repeat(60));\n\n        const passRate = Math.round((this.passed / this.total) * 100);\n        console.log(`‚úÖ Passed: ${this.passed}/${this.total} (${passRate}%)`);\n\n        if (this.passed === this.total) {\n            console.log('üéâ TIER 1 COMPLETE: Basic protocol compliance achieved!');\n            console.log('üìà Ready for Tier 2: Stateful Session Management');\n            process.exit(0);\n        } else if (this.passed >= this.total * 0.5) {\n            console.log('‚ö†Ô∏è  TIER 1 PARTIAL: Some protocol issues remain');\n            console.log('üîß Fix basic connectivity before proceeding to Tier 2');\n            process.exit(1);\n        } else {\n            console.log('üí• TIER 1 FAILED: Fundamental protocol issues');\n            console.log('üö® Server needs basic protocol implementation');\n            process.exit(2);\n        }\n    }\n}\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n    process.exit(3);\n});\n\n// Run tests\nconst tier1 = new Tier1Tests();\ntier1.run();"],"mappings":"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","names":[]}